{"version":3,"file":"overlayscrollbars.mjs","sources":["../src/support/cache.ts","../src/support/compatibility/isBrowser.ts","../src/support/utils/types.ts","../src/support/utils/array.ts","../src/support/utils/object.ts","../src/support/dom/attribute.ts","../src/support/dom/traversal.ts","../src/support/utils/noop.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/utils/alias.ts","../src/support/compatibility/vendors.ts","../src/support/compatibility/apis.ts","../src/support/utils/function.ts","../src/support/dom/class.ts","../src/support/dom/style.ts","../src/support/utils/strings.ts","../src/support/dom/dimensions.ts","../src/support/utils/animation.ts","../src/support/utils/equal.ts","../src/support/dom/events.ts","../src/support/dom/offset.ts","../src/support/dom/scroll.ts","../src/support/eventListeners.ts","../src/options.ts","../src/classnames.ts","../src/plugins/plugins.ts","../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../src/environment.ts","../src/initialization.ts","../src/instances.ts","../src/observers/domObserver.ts","../src/observers/sizeObserver.ts","../src/observers/trinsicObserver.ts","../src/setups/observersSetup/observersSetup.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.calculations.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../src/setups/structureSetup/structureSetup.elements.ts","../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../src/setups/structureSetup/structureSetup.ts","../src/setups/setups.ts","../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser = typeof window !== 'undefined';\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | false | null | undefined;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T | false | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T | false | null | undefined;\r\nexport function each(\r\n  source: Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[], item: T): boolean => arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  // IE11 doesnt have support for Array.from\r\n  const original = Array.from;\r\n  const result: T[] = [];\r\n\r\n  if (original && arr) {\r\n    return original(arr);\r\n  }\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { from } from '../utils/array';\r\nimport { isUndefined } from '../utils/types';\r\n\r\ntype Attr = {\r\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\r\n    | string\r\n    | null\r\n    | void;\r\n};\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport const attr = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}) as Attr;\r\n\r\nconst getValueSet = (elm: HTMLElement | false | null | undefined, attrName: string) =>\r\n  new Set((attr(elm, attrName) || '').split(' '));\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added or removed.\r\n * @param value The value which shall be added or removed.\r\n * @param add True if the value shall be added, false otherwise.\r\n */\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  if (value) {\r\n    const currValuesSet = getValueSet(elm, attrName);\r\n    currValuesSet[add ? 'add' : 'delete'](value);\r\n    const newTokens = from(currValuesSet).join(' ').trim();\r\n    attr(elm, attrName, newTokens);\r\n  }\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => getValueSet(elm, attrName).has(value);\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | Node | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\nconst getElmPrototype = (isBrowser && Element.prototype) as Element; // only Element.prototype wont work on server\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    const fn: (...args: any) => boolean =\r\n      // @ts-ignore\r\n      getElmPrototype.matches || getElmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    // IE11 doesnt support closest\r\n    const closestFn = getElmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    // element.remove() not supported in IE11\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n) => before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: Node | false | null | undefined, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { attr } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  attr(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { concat, each } from '../utils/array';\r\nimport { hasOwnProperty } from '../utils/object';\r\nimport { createDiv } from '../dom/create';\r\nimport { wnd } from '../utils/alias';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\nexport type JsApiName = Extract<keyof typeof window, string>;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: any } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string | undefined => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) =>\r\n        elmStyle[resultPossibility as keyof CSSStyleDeclaration] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (\r\n  property: string,\r\n  values: string,\r\n  suffix?: string\r\n): string | undefined => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = concat([''], cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: JsApiName): T | undefined => {\r\n  let result: any = jsCache[name] || wnd[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || wnd[(prefix + firstLetterToUpper(name)) as JsApiName];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from './vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = jsAPI<new (constructor: unknown) => AnimationTimeline>(\r\n  // @ts-ignore\r\n  'ScrollTimeline'\r\n);\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { isString } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\n\r\ntype ClassContainingElement = Node | Element | false | null | undefined;\r\ntype ClassName = string | false | null | undefined;\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: ClassContainingElement,\r\n  className: ClassName,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  const classList = elm && (elm as Element).classList;\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (classList && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\r\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport { wnd } from '../utils/alias';\r\nimport { each } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(elm: HTMLElement | false | null | undefined, styles: StyleObject): void {\r\n  elm &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : rawValue + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : styles.reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\nexport const getDirectionIsRTL = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  getStyles(elm, 'direction') === 'rtl';\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strHidden = 'hidden';\r\n","import { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","import { isUndefined } from '../utils/types';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { wnd } from '../utils/alias';\r\nimport { noop } from '../utils/noop';\r\nimport { keys } from '../utils';\r\n\r\nlet passiveEventsSupport: boolean | undefined;\r\nconst passiveStr = 'passive';\r\nconst supportPassiveEvents = (): boolean => {\r\n  // IE11 doesn't support passive events\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      wnd.addEventListener(\r\n        passiveStr,\r\n        noop,\r\n        Object.defineProperty({}, passiveStr, {\r\n          get() {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: (event: Event) => any;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    splitEventNames(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from './dimensions';\r\nimport { wnd } from '../utils/alias';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> => {\r\n  const rect = elm && getBoundingClientRect(elm);\r\n  return rect\r\n    ? {\r\n        x: rect.left + wnd.pageYOffset, //IE11 compat\r\n        y: rect.top + wnd.pageXOffset, //IE11 compat\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import type { Environment } from '~/environment';\r\nimport type { XY } from './offset';\r\nimport { isNumber } from '../utils';\r\n\r\n/**\r\n * Transforms a normalized (>= 0) scroll position to a RTL compatilbe scroll position value.\r\n * @param normalizedScrollPosition The normalized scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns The input scroll position but transformed to a RTL compatible format.\r\n */\r\nexport const getRTLCompatibleScrollPosition = (\r\n  normalizedScrollPosition: number,\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) =>\r\n  rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? -normalizedScrollPosition\r\n      : rtlScrollBehavior.i\r\n      ? normalizedScrollPositionMax - normalizedScrollPosition\r\n      : normalizedScrollPosition\r\n    : normalizedScrollPosition;\r\n\r\n/**\r\n * Gets the RTL compatilbe scroll boundaries from the normalized (>= 0) max scroll position.\r\n * @param normalizedScrollPositionMax The normalzed max scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns RTL compatible scroll boundaries. (min will scroll to start and max will scroll to end)\r\n */\r\nexport const getRTLCompatibleScrollBounds = (\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n): [min: number, max: number] => [\r\n  rtlScrollBehavior ? (rtlScrollBehavior.i ? normalizedScrollPositionMax : 0) : 0,\r\n  getRTLCompatibleScrollPosition(\r\n    normalizedScrollPositionMax,\r\n    normalizedScrollPositionMax,\r\n    rtlScrollBehavior\r\n  ),\r\n];\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElmentScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","const dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\n// misc\r\nexport const classNameScrollbarHidden = `os-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueHostUpdating = 'updating';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarNoCssCustomProps = 'os-no-css-vars';\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  offsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = offsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = offsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import {\r\n  keys,\r\n  attr,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  attrClass,\r\n  wnd,\r\n  mathAbs,\r\n  mathRound,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  strHeight,\r\n  getStyles,\r\n  setStyles,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport type { WH, UpdateCache, XY } from '~/support';\r\nimport type { StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type {\r\n  ViewportOverflowState,\r\n  GetViewportOverflowState,\r\n  HideNativeScrollbars,\r\n} from '~/setups/structureSetup/updateSegments/overflowUpdateSegment';\r\nimport type { InternalEnvironment } from '~/environment';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport type ArrangeViewport = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  viewportScrollSize: WH<number>,\r\n  sizeFraction: WH<number>,\r\n  directionIsRTL: boolean\r\n) => boolean;\r\n\r\nexport type UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nexport type UndoArrangeViewport = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  directionIsRTL: boolean,\r\n  viewportOverflowState?: ViewportOverflowState\r\n) => UndoViewportArrangeResult;\r\n\r\nlet contentArrangeCounter = 0;\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _createUniqueViewportArrangeElement: (env: InternalEnvironment): false | HTMLStyleElement => {\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _cssCustomProperties } = env;\r\n        const create =\r\n          !_cssCustomProperties &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const result = create ? document.createElement('style') : false;\r\n\r\n        if (result) {\r\n          attr(\r\n            result,\r\n            'id',\r\n            `${dataAttributeViewport}-${dataValueViewportArrange}-${contentArrangeCounter}`\r\n          );\r\n          contentArrangeCounter++;\r\n        }\r\n\r\n        return result;\r\n      },\r\n      _overflowUpdateSegment: (\r\n        doViewportArrange: boolean,\r\n        flexboxGlue: boolean,\r\n        viewport: HTMLElement,\r\n        viewportArrange: HTMLStyleElement | false | null | undefined,\r\n        state: StructureSetupState,\r\n        getViewportOverflowState: GetViewportOverflowState,\r\n        hideNativeScrollbars: HideNativeScrollbars\r\n      ): [ArrangeViewport, UndoArrangeViewport] => {\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const arrangeViewport: ArrangeViewport = (\r\n          viewportOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          directionIsRTL\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            // adjust content arrange / before element\r\n            if (viewportArrange) {\r\n              const { sheet } = viewportArrange;\r\n              if (sheet) {\r\n                const { cssRules } = sheet;\r\n                if (cssRules) {\r\n                  if (!cssRules.length) {\r\n                    sheet.insertRule(\r\n                      `#${attr(\r\n                        viewportArrange,\r\n                        'id'\r\n                      )} + [${dataAttributeViewport}~='${dataValueViewportArrange}']::before {}`,\r\n                      0\r\n                    );\r\n                  }\r\n\r\n                  // @ts-ignore\r\n                  const ruleStyle = cssRules[0].style;\r\n\r\n                  ruleStyle[strWidth] = arrangeSize.w;\r\n                  ruleStyle[strHeight] = arrangeSize.h;\r\n                }\r\n              }\r\n            } else {\r\n              setStyles(viewport, {\r\n                '--os-vaw': arrangeSize.w,\r\n                '--os-vah': arrangeSize.h,\r\n              });\r\n            }\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const undoViewportArrange: UndoArrangeViewport = (\r\n          showNativeOverlaidScrollbars,\r\n          directionIsRTL,\r\n          viewportOverflowState?\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState =\r\n              viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n\r\n            // add class\r\n            attrClass(viewport, dataAttributeViewport, dataValueViewportArrange);\r\n\r\n            if (!flexboxGlue) {\r\n              finalPaddingStyle[strHeight] = '';\r\n            }\r\n\r\n            setStyles(viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                hideNativeScrollbars(\r\n                  finalViewportOverflowState,\r\n                  directionIsRTL,\r\n                  doViewportArrange,\r\n                  prevStyle\r\n                );\r\n                setStyles(viewport, prevStyle);\r\n                // remove class\r\n                attrClass(viewport, dataAttributeViewport, dataValueViewportArrange, true);\r\n              },\r\n              finalViewportOverflowState,\r\n            ];\r\n          }\r\n          return [noop];\r\n        };\r\n\r\n        return [arrangeViewport, undoViewportArrange];\r\n      },\r\n      _envWindowZoom: () => {\r\n        let size = { w: 0, h: 0 };\r\n        let dpr = 0;\r\n        const getWindowDPR = (): number => {\r\n          const screen = wnd.screen;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const dDPI = screen.deviceXDPI || 0;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const sDPI = screen.logicalXDPI || 1;\r\n          return wnd.devicePixelRatio || dDPI / sDPI;\r\n        };\r\n        const diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n          const absValOne = mathAbs(valOne);\r\n          const absValTwo = mathAbs(valTwo);\r\n          return !(\r\n            absValOne === absValTwo ||\r\n            absValOne + 1 === absValTwo ||\r\n            absValOne - 1 === absValTwo\r\n          );\r\n        };\r\n\r\n        return (\r\n          envInstance: InternalEnvironment,\r\n          updateNativeScrollbarSizeCache: UpdateCache<XY<number>>\r\n        ): boolean | undefined => {\r\n          const sizeNew = windowSize();\r\n          const deltaSize = {\r\n            w: sizeNew.w - size.w,\r\n            h: sizeNew.h - size.h,\r\n          };\r\n\r\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n            return;\r\n          }\r\n\r\n          const deltaAbsSize = {\r\n            w: mathAbs(deltaSize.w),\r\n            h: mathAbs(deltaSize.h),\r\n          };\r\n          const deltaAbsRatio = {\r\n            w: mathAbs(mathRound(sizeNew.w / (size.w / 100.0))),\r\n            h: mathAbs(mathRound(sizeNew.h / (size.h / 100.0))),\r\n          };\r\n          const dprNew = getWindowDPR();\r\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n          const dprChanged = dprNew !== dpr && dprNew > 0;\r\n          const isZoom = deltaIsBigger && difference && dprChanged;\r\n          let scrollbarSizeChanged;\r\n          let scrollbarSize;\r\n\r\n          if (isZoom) {\r\n            [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n          }\r\n\r\n          size = sizeNew;\r\n          dpr = dprNew;\r\n\r\n          return scrollbarSizeChanged;\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  removeAttr,\r\n  removeElements,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  getStyles,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameScrollbarHidden,\r\n} from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** The rtl scroll behavior of the browser. */\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  /** Whether the browser supports all needed Flexbox features for OverlayScrollbars to work in a more performant way. */\r\n  flexboxGlue: boolean;\r\n  /** Whether the browser supports custom css properties. (also known as css variables) */\r\n  cssCustomProperties: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement,\r\n  clear?: boolean\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  clear && removeElements(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameScrollbarHidden);\r\n  try {\r\n    result =\r\n      getStyles(testElm, cssProperty('scrollbar-width') as StyleObjectKey) === 'none' ||\r\n      getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n  } catch {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  setStyles(parentElm, { [strOverflowX]: strHidden, [strOverflowY]: strHidden, direction: 'rtl' });\r\n  scrollElementTo(parentElm, { x: 0 });\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollElementTo(parentElm, { x: -999 }); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  // IE11 doesn't support \"flexbox glue\"\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) =>\r\n        nativeScrollbarsHiding && target === target.ownerDocument.body && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: getStyles(envElm, 'zIndex') === '-1', // IE11 doesn't support css custom props\r\n    _scrollTimeline: !!scrollT,\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  wnd.addEventListener('resize', () => {\r\n    let scrollbarSizeChanged;\r\n    if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n      const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n        scrollbarsHidingPluginName\r\n      );\r\n      const zoomFn = scrollbarsHidingPlugin ? scrollbarsHidingPlugin._envWindowZoom() : noop;\r\n      scrollbarSizeChanged = !!zoomFn(env, updateNativeScrollbarSizeCache);\r\n    }\r\n\r\n    triggerEvent('r', [scrollbarSizeChanged]);\r\n  });\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype StaticInitialization = HTMLElement | false | null;\r\ntype DynamicInitialization = HTMLElement | boolean | null;\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames.trim(), (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue = isAttrChange\r\n          ? attr(mutationTarget as HTMLElement, attributeName || '')\r\n          : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  removeClass,\r\n  stopPropagation,\r\n  appendChildren,\r\n  getDirectionIsRTL,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  isArray,\r\n  getRTLCompatibleScrollPosition,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether direction changes should be observed. */\r\n  _direction?: boolean;\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const scrollAmount = 3333333;\r\n  const { _direction: observeDirectionChange, _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const getIsDirectionRTL = bind(getDirectionIsRTL, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (\r\n      sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry | boolean\r\n    ) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n      const hasDirectionCache = !isResizeObserverCall && isArray(sizeChangedContext);\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n      let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        const appeared = domRectAppeared(currRContentRect, prevContentRect);\r\n        const firstCall = !prevContentRect;\r\n        appear = firstCall || appeared;\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n\r\n        doDirectionScroll = !skip; // direction scroll when not skipping\r\n      }\r\n      // else if its triggered with DirectionCache\r\n      else if (hasDirectionCache) {\r\n        [, doDirectionScroll] = sizeChangedContext; // direction scroll when DirectionCache changed, false otherwise\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (observeDirectionChange && doDirectionScroll) {\r\n        const rtl = hasDirectionCache ? sizeChangedContext[0] : getDirectionIsRTL(sizeObserver);\r\n        scrollElementTo(sizeObserver, {\r\n          x: getRTLCompatibleScrollPosition(scrollAmount, scrollAmount, rtl && rtlScrollBehavior),\r\n          y: scrollAmount,\r\n        });\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _directionIsRTLCache: hasDirectionCache ? sizeChangedContext : undefined,\r\n          _sizeChanged: !hasDirectionCache,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    if (observeDirectionChange) {\r\n      const [updateDirectionIsRTLCache] = createCache(\r\n        {\r\n          _initialValue: undefined,\r\n        },\r\n        getIsDirectionRTL\r\n      );\r\n\r\n      push(\r\n        destroyFns,\r\n        addEventListener(sizeObserver, 'scroll', (event) => {\r\n          const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n          const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n            directionIsRTLCacheValues;\r\n          if (directionIsRTLCacheChanged) {\r\n            removeClass(listenerElement, 'ltr rtl');\r\n            addClass(listenerElement, directionIsRTLCache ? 'rtl' : 'ltr');\r\n\r\n            onSizeChangedCallbackProxy([\r\n              !!directionIsRTLCache,\r\n              directionIsRTLCacheChanged,\r\n              directionIsRTLCachePrevious,\r\n            ]);\r\n          }\r\n\r\n          stopPropagation(event);\r\n        })\r\n      );\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  attr,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  getDirectionIsRTL,\r\n  each,\r\n  equalWH,\r\n  fractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttr,\r\n  scrollSize,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueHostOverflowVisible,\r\n  dataValueHostUpdating,\r\n  dataValueViewportArrange,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'];\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(structureSetupElements._host),\r\n  };\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _flexboxGlue, _addResizeListener } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const hasOver = _viewportHasClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible\r\n      );\r\n      const hasVpStyle = _viewportHasClass(dataValueViewportArrange, '');\r\n      const scrollOffset = hasVpStyle && getElmentScroll(_viewport);\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, dataValueHostOverflowVisible);\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '');\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible,\r\n        hasOver\r\n      );\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '', hasVpStyle);\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n      scrollElementTo(_viewport, scrollOffset);\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear && !_directionIsRTLCache;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache || [];\r\n\r\n    _directionIsRTLCache && assignDeep(state, { _directionIsRTL: directionIsRTL });\r\n\r\n    updateFn({\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n      _directionChanged: directionIsRTLChanged,\r\n    });\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints = { _hostMutation: targetStyleChanged };\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] =\r\n    _content || !_flexboxGlue ? createTrinsicObserver(_host, onTrinsicChanged) : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getRTLCompatibleScrollBounds,\r\n  mathMax,\r\n  mathMin,\r\n  mathRound,\r\n  strHeight,\r\n  strWidth,\r\n} from '~/support';\r\nimport type { Environment } from '~/environment';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarStructure } from './scrollbarsSetup.elements';\r\n\r\nconst capNumber = (min: number, max: number, number: number) => mathMax(min, mathMin(max, number));\r\n\r\nexport const getScrollbarHandleOffsetPercent = (\r\n  scrollPos: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) => {\r\n  const rawScrollPosMax = mathRound(overflowAmount);\r\n  const [scrollPositionMin, scrollPositionMax] = getRTLCompatibleScrollBounds(\r\n    rawScrollPosMax,\r\n    rtlScrollBehavior\r\n  );\r\n\r\n  const scrollPercentNegate = (scrollPositionMax - scrollPos) / scrollPositionMax;\r\n  const scrollPercentInvert = scrollPos / scrollPositionMin;\r\n  const scrollPercentNone = scrollPos / scrollPositionMax;\r\n  const rawScrollPercent = rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? scrollPercentNegate\r\n      : rtlScrollBehavior.i\r\n      ? scrollPercentInvert\r\n      : scrollPercentNone\r\n    : scrollPercentNone;\r\n\r\n  return capNumber(0, 1, rawScrollPercent);\r\n};\r\n\r\n/**\r\n * Gets the scrollbar handle length ratio\r\n * @param structureSetupState The structure setup state.\r\n * @param isHorizontal Whether the axis is horizontal\r\n * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n * @returns The scrollbar handle length ratio.\r\n */\r\nexport const getScrollbarHandleLengthRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  isHorizontal?: boolean,\r\n  scrollbarStructure?: ScrollbarStructure\r\n) => {\r\n  if (scrollbarStructure) {\r\n    const axis = isHorizontal ? strWidth : strHeight;\r\n    const { _track, _handle } = scrollbarStructure;\r\n\r\n    const handleSize = getBoundingClientRect(_handle)[axis];\r\n    const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n    return capNumber(0, 1, handleSize / trackSize);\r\n  }\r\n\r\n  const axis = isHorizontal ? 'x' : 'y';\r\n  const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n  const viewportSize = _overflowEdge[axis];\r\n  const overflowAmount = _overflowAmount[axis];\r\n\r\n  return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount));\r\n};\r\n\r\nexport const getScrollbarHandleOffsetRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollPercent: number,\r\n  isHorizontal?: boolean\r\n) => {\r\n  const lengthRatio = getScrollbarHandleLengthRatio(\r\n    structureSetupState,\r\n    isHorizontal,\r\n    scrollbarStructure\r\n  );\r\n\r\n  return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  getDirectionIsRTL,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  setT,\r\n  bind,\r\n  getElmentScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarTransitionless,\r\n  classNameScrollbarNoCssCustomProps,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\nimport {\r\n  getScrollbarHandleLengthRatio,\r\n  getScrollbarHandleOffsetPercent,\r\n  getScrollbarHandleOffsetRatio,\r\n} from './scrollbarsSetup.calculations';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _cssCustomProperties } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: 'x' | 'y') =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimelineX = initScrollTimeline('x');\r\n  const scrollTimelineY = initScrollTimeline('y');\r\n\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n  const getScrollbarOffsetKeyframes = (\r\n    overflowAmount: number,\r\n    isHorizontal?: boolean,\r\n    directionRTL?: boolean\r\n  ) => {\r\n    const cushion = 0.5 * (directionRTL ? 1 : -1);\r\n    const directionRTLMultiplicator = isHorizontal && directionRTL ? -1 : 1;\r\n    return {\r\n      transform: [\r\n        getTrasformTranslateValue(numberToCssPx(0 + cushion), isHorizontal),\r\n        getTrasformTranslateValue(\r\n          numberToCssPx(overflowAmount * directionRTLMultiplicator + cushion),\r\n          isHorizontal\r\n        ),\r\n      ],\r\n    };\r\n  };\r\n  const addDirectionRTLKeyframes = (\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    directionRTL?: boolean\r\n  ) =>\r\n    assignDeep(\r\n      keyframes,\r\n      directionRTL\r\n        ? {\r\n            clear: ['left'], // dummy keyframe for direction rtl animation because of chrome bug\r\n          }\r\n        : {}\r\n    );\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(structureSetupState, isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    if (scrollTimelineX && scrollTimelineY) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _scrollbar, _handle } = structure;\r\n        const getRatio = bind(getScrollbarHandleOffsetRatio, structureSetupState, structure);\r\n        const directionRTL = isHorizontal && getDirectionIsRTL(_scrollbar);\r\n        const start = getRatio(directionRTL ? 1 : 0, isHorizontal);\r\n        const end = getRatio(directionRTL ? 0 : 1, isHorizontal);\r\n        setElementAnimation(\r\n          _handle,\r\n          isHorizontal ? scrollTimelineX : scrollTimelineY,\r\n          addDirectionRTLKeyframes(\r\n            {\r\n              transform: [\r\n                getTrasformTranslateValue(ratioToCssPercent(start), isHorizontal),\r\n                getTrasformTranslateValue(ratioToCssPercent(end), isHorizontal),\r\n              ],\r\n            },\r\n            directionRTL\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => {\r\n        const { _handle, _scrollbar } = structure;\r\n        const { _rtlScrollBehavior } = getEnvironment();\r\n        const axis = isHorizontal ? 'x' : 'y';\r\n        const { _overflowAmount } = structureSetupState;\r\n        const isRTL = getDirectionIsRTL(_scrollbar);\r\n\r\n        const offsetRatio = getScrollbarHandleOffsetRatio(\r\n          structureSetupState,\r\n          structure,\r\n          getScrollbarHandleOffsetPercent(\r\n            getElmentScroll(_scrollOffsetElement)[axis],\r\n            _overflowAmount[axis],\r\n            isHorizontal && isRTL && _rtlScrollBehavior\r\n          ),\r\n          isHorizontal\r\n        );\r\n\r\n        return [\r\n          _handle,\r\n          {\r\n            transform: getTrasformTranslateValue(ratioToCssPercent(offsetRatio), isHorizontal),\r\n          },\r\n        ];\r\n      });\r\n    }\r\n  };\r\n  const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n    const { _scrollbar } = structure;\r\n    const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n    const { x, y } = getElmentScroll(_scrollOffsetElement);\r\n    return [\r\n      elm,\r\n      {\r\n        transform: elm\r\n          ? getTrasformTranslateValue({ x: numberToCssPx(x), y: numberToCssPx(y) })\r\n          : '',\r\n      },\r\n    ] as [HTMLElement | false, StyleObject];\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      if (scrollTimelineX && scrollTimelineY) {\r\n        const { _overflowAmount } = structureSetupState;\r\n        const directionRTL = !!horizontalScrollbars.find(({ _scrollbar }) =>\r\n          getDirectionIsRTL(_scrollbar)\r\n        );\r\n        const setScrollbarElementAnimation = (\r\n          scrollbar: HTMLElement,\r\n          timeline: AnimationTimeline,\r\n          overflowAmount: number,\r\n          isHorizontal?: boolean,\r\n          rtl?: boolean\r\n        ) =>\r\n          setElementAnimation(\r\n            scrollbar,\r\n            timeline,\r\n            addDirectionRTLKeyframes(\r\n              getScrollbarOffsetKeyframes(overflowAmount, isHorizontal, rtl),\r\n              directionRTL\r\n            ),\r\n            'add'\r\n          );\r\n\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            setScrollbarElementAnimation(\r\n              _scrollbar,\r\n              scrollTimelineX,\r\n              _overflowAmount.x,\r\n              true,\r\n              directionRTL\r\n            );\r\n            setScrollbarElementAnimation(_scrollbar, scrollTimelineY, _overflowAmount.y);\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNameScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    if (!_cssCustomProperties) {\r\n      addClass(scrollbar, classNameScrollbarNoCssCustomProps);\r\n    }\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNameScrollbarTransitionless);\r\n    }, 300);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimelineX,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimelineY,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  offsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  stopPropagation,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  attrClass,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataValueHostScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState\r\n): ScrollbarsSetupEvents => {\r\n  const { _host, _scrollOffsetElement, _documentElm } = structureSetupElements;\r\n\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [requestHandleTransitionAnimationFrame, cancelHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollByFn = !!_scrollOffsetElement.scrollBy;\r\n\r\n    const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY'; // for pointer event (can't use xy because of IE11)\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n    const leftTopKey = isHorizontal ? 'left' : 'top'; // for BCR (can't use xy because of IE11)\r\n    const whKey = isHorizontal ? 'w' : 'h';\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              offsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElmentScroll(_scrollOffsetElement)[xyKey] || 0,\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n\r\n          const offFns = [\r\n            bind(attrClass, _host, dataAttributeHost, dataValueHostScrollbarPressed),\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          attrClass(_host, dataAttributeHost, dataValueHostScrollbarPressed, true);\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            _scrollOffsetElement.scrollBy({\r\n              left: deltaX,\r\n              top: deltaY,\r\n              behavior: 'smooth',\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          cancelHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // rootClickStopPropagationEvent\r\n      addEventListener(\r\n        _scrollbar,\r\n        'mousedown',\r\n        bind(addEventListener, _documentElm, 'click', stopPropagation, {\r\n          _once: true,\r\n          _capture: true,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      cancelHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import { bind, noop, addEventListener, push, runEachAndClear, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport { type ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideNotNever: boolean | undefined;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = selfClearTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = selfClearTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(options, structureSetupElements, structureSetupState)\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      mouseInHost && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowAmount, _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged || _overflowAmountChanged || _directionChanged || _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  noop,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNameScrollbarHidden,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n  resolveInitialization as generalResolveInitialization,\r\n} from '~/initialization';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportIsContent: boolean;\r\n  _viewportHasClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string\r\n  ) => boolean;\r\n  _viewportAddRemoveClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string,\r\n    add?: boolean\r\n  ) => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const docWnd = ownerDocument.defaultView as Window;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const resolveInitialization = bind(generalResolveInitialization, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // check the default contentElement\r\n  // if truthy (so the element would be present in the DOM) the passed element is the final content element and the viewport element is generated\r\n  // if falsy (so the element wouldn't be present in the DOM) the passed element is the final viewport element and the content element is omitted\r\n  const viewportIsContent =\r\n    !viewportIsTarget &&\r\n    isHTMLElement(possibleViewportElement) &&\r\n    possibleViewportElement === possibleContentElement;\r\n  const defaultContentElementPresent =\r\n    viewportIsContent && !!resolveInitialization(defaultContentInitialization);\r\n  const viewportIstContentViewport = defaultContentElementPresent\r\n    ? generateViewportElement()\r\n    : possibleViewportElement;\r\n  const viewportIsContentContent = defaultContentElementPresent\r\n    ? possibleContentElement\r\n    : generateContentElement();\r\n  const nonBodyViewportElement = viewportIsContent\r\n    ? viewportIstContentViewport\r\n    : possibleViewportElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : nonBodyViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const contentElement = viewportIsContent ? viewportIsContentContent : possibleContentElement;\r\n  const activeElm = ownerDocument.activeElement;\r\n  const setViewportFocus =\r\n    !viewportIsTarget && docWnd.top === docWnd && activeElm === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content: contentElement,\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _windowElm: docWnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportIsContent: viewportIsContent,\r\n    _viewportHasClass: (viewportAttributeClassName: string, hostAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (\r\n      viewportAttributeClassName: string,\r\n      hostAttributeClassName: string,\r\n      add?: boolean\r\n    ) =>\r\n      attrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key) => {\r\n    const value = evaluatedTargetObj[key as keyof StructureSetupElementsObj];\r\n    return push(arr, value && isHTMLElement(value) && !parent(value) ? value : false);\r\n  }, [] as Array<HTMLElement | false>);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? inArray(generatedElements, elm) : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttr(_host, dataAttributeHost);\r\n      removeAttr(_host, dataAttributeInitialize);\r\n      removeAttr(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttr(docElement, dataAttributeHost);\r\n        removeAttr(docElement, dataAttributeInitialize);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    attr(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    attr(_padding, dataAttributePadding, '');\r\n    attr(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      attr(_viewport, dataAttributeViewport, '');\r\n    }\r\n\r\n    const removeHtmlClass =\r\n      isBody && !viewportIsTarget\r\n        ? addClass(parent(targetElement), classNameScrollbarHidden)\r\n        : noop;\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHtmlClass();\r\n      removeAttr(_padding, dataAttributePadding);\r\n      removeAttr(_content, dataAttributeContent);\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n      removeAttr(_viewport, dataAttributeViewport);\r\n\r\n      elementIsGenerated(_content) && unwrap(_content);\r\n      elementIsGenerated(_viewport) && unwrap(_viewport);\r\n      elementIsGenerated(_padding) && unwrap(_padding);\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      attrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden, true);\r\n      push(destroyFns, bind(removeAttr, _viewport, dataAttributeViewport));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, bind(removeElements, _viewportArrange));\r\n    }\r\n    if (setViewportFocus) {\r\n      const tabIndexStr = 'tabindex';\r\n      const ogTabindex = attr(_viewport, tabIndexStr);\r\n\r\n      attr(_viewport, tabIndexStr, '-1');\r\n      _viewport.focus();\r\n\r\n      const revertViewportTabIndex = () =>\r\n        ogTabindex ? attr(_viewport, tabIndexStr, ogTabindex) : removeAttr(_viewport, tabIndexStr);\r\n      const off = addEventListener(ownerDocument, 'pointerdown keydown', () => {\r\n        revertViewportTabIndex();\r\n        off();\r\n      });\r\n\r\n      push(destroyFns, [revertViewportTabIndex, off]);\r\n    } else if (activeElm && (activeElm as HTMLElement).focus) {\r\n      (activeElm as HTMLElement).focus();\r\n    }\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged =\r\n      (_content || !_flexboxGlue) && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding, _flexboxGlue } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || (!_flexboxGlue && _contentMutation);\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  clientSize,\r\n  equalXY,\r\n  attrClass,\r\n  noop,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  windowSize,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strWidth,\r\n  strHeight,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  setStyles,\r\n  getStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostScrollbarHidden,\r\n  dataValueHostOverflowVisible,\r\n  dataValueViewportScrollbarHidden,\r\n  dataValueViewportOverflowVisible,\r\n  dataAttributeViewport,\r\n  dataAttributePadding,\r\n  dataValuePaddingOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { WH, XY } from '~/support';\r\nimport type {\r\n  ArrangeViewport,\r\n  ScrollbarsHidingPlugin,\r\n  UndoArrangeViewport,\r\n} from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle, StyleObjectKey } from '~/typings';\r\nimport type { OverflowBehavior } from '~/options';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\nexport interface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport type GetViewportOverflowState = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  viewportStyleObj?: StyleObject\r\n) => ViewportOverflowState;\r\n\r\nexport type HideNativeScrollbars = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  directionIsRTL: boolean,\r\n  viewportArrange: boolean,\r\n  viewportStyleObj: StyleObject\r\n) => void;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n    _isBody,\r\n    _windowElm,\r\n  },\r\n  state\r\n) => {\r\n  const max0 = bind(mathMax, 0);\r\n  const strVisible = 'visible';\r\n  const overlaidScrollbarsHideOffset = 42;\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const xyCacheOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n  };\r\n  const getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const overflowIsVisible = (overflowBehavior: string) =>\r\n    overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarsHiding,\r\n    _nativeScrollbarsOverlaid,\r\n  } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarsHiding &&\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(fractionalSize, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(scrollSize, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    setStyles(_viewport, {\r\n      [strHeight]: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = state;\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = getStyles(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n      setStyles(_viewport, {\r\n        [strHeight]:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState: GetViewportOverflowState = (\r\n    showNativeOverlaidScrollbars,\r\n    viewportStyleObj?\r\n  ) => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: StyleObjectKey,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = getStyles(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowX, _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowY, _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj[strOverflowX] = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj[strOverflowY] = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars: HideNativeScrollbars = (\r\n    viewportOverflowState,\r\n    directionIsRTL,\r\n    viewportArrange,\r\n    viewportStyleObj\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? strMarginLeft : strMarginRight;\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? strPaddingLeft\r\n      : strPaddingRight;\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle[strMarginBottom] as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj[strWidth] = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj[strPaddingBottom] = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\r\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\r\n        doViewportArrange,\r\n        _flexboxGlue,\r\n        _viewport,\r\n        _viewportArrange,\r\n        state,\r\n        getViewportOverflowState,\r\n        hideNativeScrollbars\r\n      )\r\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n      _scrollbarSizeChanged,\r\n    } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic, _directionIsRTL } = _observersState;\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = _checkOption(\r\n      'showNativeOverlaidScrollbars'\r\n    );\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const adjustViewportArrange =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportScrollbarHidden,\r\n        dataValueHostScrollbarHidden,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (adjustViewportArrange) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(\r\n          dataValueViewportOverflowVisible,\r\n          dataValueHostOverflowVisible,\r\n          false\r\n        );\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const windowInnerSize = windowSize(_windowElm);\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue ||\r\n      adjustViewportArrange;\r\n\r\n    if (adjustViewportStyle) {\r\n      const viewportStyle: StyleObject = {\r\n        [strMarginRight]: 0,\r\n        [strMarginBottom]: 0,\r\n        [strMarginLeft]: 0,\r\n        [strWidth]: '',\r\n        [strOverflowX]: '',\r\n        [strOverflowY]: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle[strOverflowX] as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle[strOverflowY] as string);\r\n      } else {\r\n        setStyles(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    attrClass(_padding, dataAttributePadding, dataValuePaddingOverflowVisible, removeClipping);\r\n    if (!_viewportIsTarget) {\r\n      attrClass(\r\n        _viewport,\r\n        dataAttributeViewport,\r\n        dataValueViewportOverflowVisible,\r\n        overflowVisible\r\n      );\r\n    }\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    assignDeep(state, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataValueHostUpdating } from '~/classnames';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n  };\r\n  const { _target, _viewport, _viewportAddRemoveClass, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _flexboxGlue } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n      const scrollOffset = adjustScrollOffset && getElmentScroll(_viewport);\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElmentScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _target, _viewport, _documentElm, _isBody } = structureSetupElements;\r\n      const scrollingElement = _isBody ? _documentElm.documentElement : _target;\r\n      const initialScroll = getElmentScroll(scrollingElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_viewport, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { Environment } from '~/environment';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n            _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["createCache","options","update","o","_initialValue","u","_equal","_","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isBrowser","window","ElementNodeType","Node","ELEMENT_NODE","toString","hasOwnProperty","Object","prototype","typeRgx","isUndefined","obj","undefined","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","key","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","each","source","callback","i","keys","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","from","original","result","Set","forEach","value","elm","createOrKeepArray","isEmptyArray","deduplicateArray","runEachAndClear","args","keep","runFn","fn","prop","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","copy","copyIsArray","src","clone","slice","removeUndefinedProperties","deep","isEmptyObject","name","attr","attrName","getAttribute","setAttribute","getValueSet","split","removeAttr","removeAttribute","attrClass","add","currValuesSet","newTokens","join","trim","hasAttrClass","has","getElmPrototype","find","selector","rootElm","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","closestFn","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","noop","removeElements","nodes","e","parentElm","removeChild","before","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","insertedNodes","insertAfter","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","wnd","mathMax","Math","max","mathMin","min","mathRound","round","mathAbs","abs","cAF","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","firstLetterToUpper","str","charAt","toUpperCase","getDummyStyle","style","cssPrefixes","jsPrefixes","jsCache","cssCache","cssProperty","uppercasedName","elmStyle","prefix","prefixWithoutDashes","resultPossibilities","resultPossibility","jsAPI","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","bind","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","v","_timeout","p","_maxDelay","S","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","arguments","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","rnothtmlwhite","classListAction","className","action","classList","clazz","classes","match","removeClass","remove","addClass","customCssPropRegex","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","number","notNaN","isFinite","parseToZeroOrNumber","parseFloat","ratioToCssPercent","ratio","toFixed","numberToCssPx","setStyles","styles","rawValue","test","setProperty","_unused","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","reduce","getDirectionIsRTL","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strHidden","zeroObj","w","h","getElmWidthHeightProperty","property","windowSize","customWnd","offsetSize","clientSize","scrollSize","fractionalSize","cssWidth","cssHeight","getBoundingClientRect","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","rectHadDimensions","animationCurrentTime","performance","now","animateNumber","to","duration","onFrame","easing","animationFrameId","timeStart","finalDuration","frame","complete","timeNow","timeElapsed","stopAnimation","percent","progress","animationCompleted","equal","props","propMutation","compareA","compareB","equalWH","equalXY","equalTRBL","equalBCRWH","passiveEventsSupport","passiveStr","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","eventNames","removeEventListener","listener","capture","eventName","_ref","doSupportPassiveEvents","passive","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","absoluteCoordinates","pageYOffset","pageXOffset","getRTLCompatibleScrollPosition","normalizedScrollPosition","normalizedScrollPositionMax","rtlScrollBehavior","n","getRTLCompatibleScrollBounds","scrollElementTo","position","scrollLeft","scrollTop","getElmentScroll","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","currListener","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentFlexboxGlue","classNameEnvironmentFlexboxGlueMax","classNameScrollbarHidden","dataAttributeInitialize","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostScrollbarHidden","dataValueHostScrollbarPressed","dataValueHostUpdating","dataAttributeViewport","dataValueViewportArrange","dataValueViewportScrollbarHidden","dataValueViewportOverflowVisible","dataAttributePadding","dataValuePaddingOverflowVisible","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbarNoCssCustomProps","classNameScrollbarThemeNone","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarTransitionless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","pluginModules","staticPluginModuleInstances","addPlugins","addedPlugin","plugin","registerPluginModuleInstances","staticObj","instanceInfo","static","osStatic","instance","osInstance","instanceObj","instancePluginMap","getStaticPluginModuleInstance","pluginModuleName","optionsValidationPluginModuleName","sizeObserverPluginName","SizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","scrollAmount","scrollEventName","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","destroyFns","contentArrangeCounter","scrollbarsHidingPluginName","ScrollbarsHidingPlugin","_createUniqueViewportArrangeElement","env","I","_nativeScrollbarsHiding","A","_nativeScrollbarsOverlaid","T","_cssCustomProperties","create","_overflowUpdateSegment","doViewportArrange","flexboxGlue","viewport","viewportArrange","state","getViewportOverflowState","hideNativeScrollbars","arrangeViewport","viewportOverflowState","viewportScrollSize","sizeFraction","directionIsRTL","k","_viewportPaddingStyle","M","_scrollbarsHideOffset","R","_scrollbarsHideOffsetArrange","arrangeX","arrangeY","hideOffsetX","hideOffsetY","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","sheet","cssRules","insertRule","ruleStyle","undoViewportArrange","finalViewportOverflowState","viewportPaddingStyle","finalPaddingStyle","assignProps","prevStyle","_envWindowZoom","size","dpr","getWindowDPR","screen","dDPI","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","envInstance","updateNativeScrollbarSizeCache","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","scrollbarSizeChanged","scrollbarSize","_nativeScrollbarsSize","clickScrollPluginModuleName","ClickScrollPlugin","moveHandleRelative","getHandleOffset","startOffset","handleLength","relativeTrackPointerOffset","iteration","animateClickScroll","clickScrollProgress","sign","animationProgress","handleStartBound","handleEndBound","mouseBetweenHandleBounds","firstIterationPauseTimeout","environmentInstance","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","getRtlScrollBehavior","childElm","direction","parentOffset","childOffset","childOffsetAfterScroll","getFlexboxGlue","revertFbxGlue","minOffsetsizeParent","minOffsetsize","supportsMin","revertFbxGlueMax","maxOffsetsizeParent","maxOffsetsize","supportsMax","createEnvironment","envDOM","envElm","envChildElm","getNativeScrollbarSizeCache","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","ownerDocument","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","_scrollTimeline","_rtlScrollBehavior","_flexboxGlue","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","scrollbarsHidingPlugin","zoomFn","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","isBody","cancelInitializationValue","N","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","removeInstance","delete","getInstance","createEventContentChange","eventContentChange","destroyed","destroy","updateElements","getElements","eventElmList","entries","isTargetChild","contains","removeListener","createDOMObserver","isContentObserver","isConnected","Y","_attributes","K","_styleChangingAttributes","J","_eventContentChange","Z","_nestedTargetSelector","tt","_ignoreTargetChange","nt","_ignoreContentChange","debouncedEventContentChange","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","createSizeObserver","_direction","observeDirectionChange","_appear","sizeObserverPlugin","getIsDirectionRTL","updateResizeObserverContentRectCache","baseElements","sizeObserver","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","hasDirectionCache","skip","doDirectionScroll","currRContentRect","contentRect","hasDimensions","appeared","firstCall","rtl","_directionIsRTLCache","_sizeChanged","resizeObserverInstance","pop","pluginAppearCallback","pluginDestroyFns","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLCache","directionIsRTLCacheChanged","directionIsRTLCachePrevious","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","structureSetupElements","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","_heightIntrinsic","_directionIsRTL","_host","it","ut","_viewport","ft","_content","_t","_isTextarea","dt","_viewportIsTarget","vt","_viewportHasClass","ht","_viewportAddRemoveClass","B","j","updateContentSizeCache","hasOver","hasVpStyle","scrollOffset","contentScroll","viewportScroll","fractional","contentMutationObserverAttr","onObserversUpdatedDebounced","prev","prevObj","currObj","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","updateHints","_heightIntrinsicChanged","exclusiveSizeChange","updateFn","directionIsRTLChanged","_directionChanged","onContentMutation","contentChangedThroughEvent","_contentMutation","onHostMutation","_hostMutation","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_checkOption","_takeRecords","_force","attributesChanged","elementEventsChanged","debounceValue","debounceChanged","contentMutationObserverChanged","ignoreMutationFromOptions","construct","ignore","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","capNumber","getScrollbarHandleOffsetPercent","scrollPos","overflowAmount","rawScrollPosMax","scrollPositionMin","scrollPositionMax","scrollPercentNegate","scrollPercentInvert","scrollPercentNone","rawScrollPercent","getScrollbarHandleLengthRatio","structureSetupState","scrollbarStructure","axis","Ct","_track","Ht","_handle","handleSize","trackSize","zt","_overflowAmount","It","_overflowEdge","viewportSize","getScrollbarHandleOffsetRatio","scrollPercent","lengthRatio","createScrollbarsSetupElements","scrollbarsSetupEvents","defaultInitScrollbars","defaultInitScrollbarsSlot","At","_target","Et","_targetIsElm","Tt","_scrollOffsetElement","Dt","_isBody","scrollbarsInit","initScrollbarsSlot","elementAnimations","initScrollTimeline","scrollTimelineX","scrollTimelineY","evaluatedScrollbarSlot","generalDynamicInitializationElement","doRefreshScrollbarOffset","scrollbar","getScrollbarOffsetKeyframes","directionRTL","cushion","directionRTLMultiplicator","transform","addDirectionRTLKeyframes","keyframes","cancelElementAnimations","currAnimations","element","doCancel","animation","setElementAnimation","timeline","composite","activeAnimations","activeAnimation","effect","KeyframeEffect","animate","scrollbarStructureAddRemoveClass","scrollbarStructures","_scrollbar","scrollbarStyle","scrollbarStructureRefreshHandleLength","structure","scrollbarStructureRefreshHandleOffset","kt","getRatio","start","end","U","isRTL","offsetRatio","styleScrollbarPosition","horizontalScrollbars","verticalScrollbars","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","refreshScrollbarsScrollbarOffset","setScrollbarElementAnimation","generateScrollbarDOM","scrollbarClassName","arrToPush","transitionlessClass","track","handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","appendElements","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_refreshScrollbarsScrollbarOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","createScrollbarsSetupEvents","Gt","_documentElm","refreshScrollbarStructuresHandleOffset","wheelTimeout","clearWheelTimeout","requestHandleTransitionAnimationFrame","cancelHandleTransitionTimeout","refreshHandleOffsetTransition","scrollByFn","scrollBy","clientXYKey","widthHeightKey","leftTopKey","whKey","xyKey","isAffectingTransition","propertyName","createInteractiveScrollEvents","releasePointerCaptureEvents","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","handleTrackDiff","scrollDeltaPercent","scrollDelta","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","button","isPrimary","pointerType","continuePointerDown","includes","instantClickScroll","shiftKey","getHandleRect","getTrackRect","handleRect","trackRect","axisScale","pointerDownOffset","handleCenter","releasePointerCapture","pointerUpEvent","pointerId","pointerMoveEvent","relativeMovement","setPointerCapture","wheelScrollBy","wheelEvent","deltaX","deltaY","deltaMode","behavior","animateHandleOffset","createScrollbarsSetup","observersSetupState","autoHideIsMove","autoHideIsLeave","autoHideNotNever","mouseInHost","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","requestMouseMoveAnimationFrame","cancelMouseMoveAnimationFrame","requestScrollAnimationFrame","cancelScrollAnimationFrame","scrollTimeout","clearScrollTimeout","auotHideMoveTimeout","clearAutoHideTimeout","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","auotHideTimeout","clearAutoTimeout","qt","_scrollEventElement","Lt","Mt","Rt","Pt","manageAutoHideSuspension","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","isHoverablePointerType","onHostMouseEnter","_observersUpdateHints","_structureUpdateHints","Xt","_overflowEdgeChanged","Yt","_overflowAmountChanged","Kt","_overflowStyleChanged","bt","st","lt","Jt","_overflowStyle","Zt","_hasOverflow","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","themeChanged","visibilityChanged","autoHideChanged","autoHideSuspendChanged","dragScrollChanged","clickScrollChanged","trulyAppeared","hasOverflow","updateScrollbars","updateVisibility","setScrollbarVisibility","overflowStyle","isVisible","xVisible","yVisible","hasCorner","createStructureSetupElements","createUniqueViewportArrangeElement","defaultInitElements","defaultHostInitialization","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","hostInitialization","paddingInitialization","viewportInitialization","contentInitialization","targetElement","isTextarea","docElement","documentElement","docWnd","defaultView","generalStaticInitializationElement","generalResolveInitialization","createNewDiv","generateViewportElement","generateContentElement","possibleViewportElement","viewportIsTarget","viewportIsTargetBody","possibleContentElement","viewportIsContent","defaultContentElementPresent","viewportIstContentViewport","viewportIsContentContent","nonBodyViewportElement","viewportElement","nonBodyHostElement","hostElement","contentElement","activeElm","activeElement","setViewportFocus","evaluatedTargetObj","_padding","_viewportArrange","_windowElm","_viewportIsContent","viewportAttributeClassName","hostAttributeClassName","generatedElements","elementIsGenerated","Qt","tn","isTextareaHostGenerated","targetContents","contentSlot","removeHtmlClass","unwrap","tabIndexStr","ogTabindex","focus","revertViewportTabIndex","off","createTrinsicUpdateSegment","_observersState","gt","rt","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","paddingChanged","ct","wt","paddingAbsoluteChanged","contentMutation","paddingStyleChanged","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_paddingStyleChanged","createOverflowUpdateSegment","max0","strVisible","overlaidScrollbarsHideOffset","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportClientSize","tollerance","amount","overflowIsVisible","overflowBehavior","L","updateSizeFraction","getCurrentSizeFraction","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","updateOverflowAmountCache","getCurrentOverflowAmountCache","updateOverflowEdge","getCurrentOverflowEdgeCache","updateOverflowStyleCache","fixFlexboxGlue","cn","ln","_overflowScroll","hostClientSize","isContentBox","subtractXScrollbar","viewportStyleObj","arrangeHideOffset","getStatePerAxis","styleKey","isOverlaid","nativeScrollbarSize","objectPrefferedOverflowStyle","overflowScroll","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","xOverflowStyle","xOverflowScroll","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","yOverflowStyle","yOverflowScroll","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","setViewportOverflowState","overflowOption","setAxisOverflowStyle","hasOverflowAxis","overflowVisible","overflowVisibleBehavior","overflowX","visibleBehaviorX","overflowY","visibleBehaviorY","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","yt","St","overflowChanged","adjustFlexboxGlue","adjustViewportArrange","overflowXVisible","overflowYVisible","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","preMeasureViewportOverflowState","redoViewportArrange","undoViewportArrangeOverflowState","sizeFractionChanged","viewportScrollSizeChanged","arrangedViewportScrollSize","arrangedViewportClientSize","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","overflowEdge","overflowEdgeChanged","overflowAmountChanged","removeClipping","adjustViewportStyle","viewportArranged","overflowStyleChanged","createStructureSetup","appendStructureElements","canceled","updateSegments","updateInfo","adjustScrollOffset","updateSegment","createSetups","onUpdated","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","observersSetupCreate","observersSetupUpdate","observersUpdateHints","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","updateHintsAreTruthy","hints","some","observerUpdateHints","_changedOptions","rawChangedOptions","rawForce","xt","un","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","scrollingElement","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","q","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","validateOptions","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","sizeChanged","directionChanged","hostMutation","pure","base","on","_n","Vt","Nt","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","Ut","Bt","translatedStructure","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugins","isArr","pluginsToAdd","valid","hasElmsFn","V","W","X","G","F","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","cssCustomProperties","scrollTimeline","setDefaultInitialization","setDefaultOptions"],"mappings":"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"}