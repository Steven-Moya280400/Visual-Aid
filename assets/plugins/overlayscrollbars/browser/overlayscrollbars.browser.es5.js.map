{"version":3,"file":"overlayscrollbars.browser.es5.js","sources":["../../src/support/cache.ts","../../src/support/compatibility/isBrowser.ts","../../src/support/utils/types.ts","../../src/support/utils/array.ts","../../src/support/utils/object.ts","../../src/support/dom/attribute.ts","../../src/support/dom/traversal.ts","../../src/support/utils/noop.ts","../../src/support/dom/manipulation.ts","../../src/support/dom/create.ts","../../src/support/utils/alias.ts","../../src/support/compatibility/vendors.ts","../../src/support/compatibility/apis.ts","../../src/support/utils/function.ts","../../src/support/dom/class.ts","../../src/support/dom/style.ts","../../src/support/utils/strings.ts","../../src/support/dom/dimensions.ts","../../src/support/utils/animation.ts","../../src/support/utils/equal.ts","../../src/support/dom/events.ts","../../src/support/dom/offset.ts","../../src/support/dom/scroll.ts","../../src/support/eventListeners.ts","../../src/options.ts","../../src/classnames.ts","../../src/plugins/plugins.ts","../../../../node_modules/@babel/runtime/helpers/extends.js","../../src/plugins/optionsValidationPlugin/validation.ts","../../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../../src/environment.ts","../../src/initialization.ts","../../src/instances.ts","../../src/observers/domObserver.ts","../../src/observers/sizeObserver.ts","../../src/observers/trinsicObserver.ts","../../src/setups/observersSetup/observersSetup.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.calculations.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../../src/setups/structureSetup/structureSetup.elements.ts","../../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../../src/setups/structureSetup/structureSetup.ts","../../src/setups/setups.ts","../../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser = typeof window !== 'undefined';\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | false | null | undefined;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T | false | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T | false | null | undefined;\r\nexport function each(\r\n  source: Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[], item: T): boolean => arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  // IE11 doesnt have support for Array.from\r\n  const original = Array.from;\r\n  const result: T[] = [];\r\n\r\n  if (original && arr) {\r\n    return original(arr);\r\n  }\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { from } from '../utils/array';\r\nimport { isUndefined } from '../utils/types';\r\n\r\ntype Attr = {\r\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\r\n    | string\r\n    | null\r\n    | void;\r\n};\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport const attr = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}) as Attr;\r\n\r\nconst getValueSet = (elm: HTMLElement | false | null | undefined, attrName: string) =>\r\n  new Set((attr(elm, attrName) || '').split(' '));\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added or removed.\r\n * @param value The value which shall be added or removed.\r\n * @param add True if the value shall be added, false otherwise.\r\n */\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  if (value) {\r\n    const currValuesSet = getValueSet(elm, attrName);\r\n    currValuesSet[add ? 'add' : 'delete'](value);\r\n    const newTokens = from(currValuesSet).join(' ').trim();\r\n    attr(elm, attrName, newTokens);\r\n  }\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => getValueSet(elm, attrName).has(value);\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | Node | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\nconst getElmPrototype = (isBrowser && Element.prototype) as Element; // only Element.prototype wont work on server\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    const fn: (...args: any) => boolean =\r\n      // @ts-ignore\r\n      getElmPrototype.matches || getElmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    // IE11 doesnt support closest\r\n    const closestFn = getElmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    // element.remove() not supported in IE11\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n) => before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: Node | false | null | undefined, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { attr } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  attr(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { concat, each } from '../utils/array';\r\nimport { hasOwnProperty } from '../utils/object';\r\nimport { createDiv } from '../dom/create';\r\nimport { wnd } from '../utils/alias';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\nexport type JsApiName = Extract<keyof typeof window, string>;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: any } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string | undefined => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) =>\r\n        elmStyle[resultPossibility as keyof CSSStyleDeclaration] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (\r\n  property: string,\r\n  values: string,\r\n  suffix?: string\r\n): string | undefined => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = concat([''], cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: JsApiName): T | undefined => {\r\n  let result: any = jsCache[name] || wnd[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || wnd[(prefix + firstLetterToUpper(name)) as JsApiName];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from './vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = jsAPI<new (constructor: unknown) => AnimationTimeline>(\r\n  // @ts-ignore\r\n  'ScrollTimeline'\r\n);\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { isString } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\n\r\ntype ClassContainingElement = Node | Element | false | null | undefined;\r\ntype ClassName = string | false | null | undefined;\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: ClassContainingElement,\r\n  className: ClassName,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  const classList = elm && (elm as Element).classList;\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (classList && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\r\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport { wnd } from '../utils/alias';\r\nimport { each } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(elm: HTMLElement | false | null | undefined, styles: StyleObject): void {\r\n  elm &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : rawValue + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : styles.reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\nexport const getDirectionIsRTL = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  getStyles(elm, 'direction') === 'rtl';\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strHidden = 'hidden';\r\n","import { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","import { isUndefined } from '../utils/types';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { wnd } from '../utils/alias';\r\nimport { noop } from '../utils/noop';\r\nimport { keys } from '../utils';\r\n\r\nlet passiveEventsSupport: boolean | undefined;\r\nconst passiveStr = 'passive';\r\nconst supportPassiveEvents = (): boolean => {\r\n  // IE11 doesn't support passive events\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      wnd.addEventListener(\r\n        passiveStr,\r\n        noop,\r\n        Object.defineProperty({}, passiveStr, {\r\n          get() {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: (event: Event) => any;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    splitEventNames(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from './dimensions';\r\nimport { wnd } from '../utils/alias';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> => {\r\n  const rect = elm && getBoundingClientRect(elm);\r\n  return rect\r\n    ? {\r\n        x: rect.left + wnd.pageYOffset, //IE11 compat\r\n        y: rect.top + wnd.pageXOffset, //IE11 compat\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import type { Environment } from '~/environment';\r\nimport type { XY } from './offset';\r\nimport { isNumber } from '../utils';\r\n\r\n/**\r\n * Transforms a normalized (>= 0) scroll position to a RTL compatilbe scroll position value.\r\n * @param normalizedScrollPosition The normalized scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns The input scroll position but transformed to a RTL compatible format.\r\n */\r\nexport const getRTLCompatibleScrollPosition = (\r\n  normalizedScrollPosition: number,\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) =>\r\n  rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? -normalizedScrollPosition\r\n      : rtlScrollBehavior.i\r\n      ? normalizedScrollPositionMax - normalizedScrollPosition\r\n      : normalizedScrollPosition\r\n    : normalizedScrollPosition;\r\n\r\n/**\r\n * Gets the RTL compatilbe scroll boundaries from the normalized (>= 0) max scroll position.\r\n * @param normalizedScrollPositionMax The normalzed max scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns RTL compatible scroll boundaries. (min will scroll to start and max will scroll to end)\r\n */\r\nexport const getRTLCompatibleScrollBounds = (\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n): [min: number, max: number] => [\r\n  rtlScrollBehavior ? (rtlScrollBehavior.i ? normalizedScrollPositionMax : 0) : 0,\r\n  getRTLCompatibleScrollPosition(\r\n    normalizedScrollPositionMax,\r\n    normalizedScrollPositionMax,\r\n    rtlScrollBehavior\r\n  ),\r\n];\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElmentScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","const dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\n// misc\r\nexport const classNameScrollbarHidden = `os-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueHostUpdating = 'updating';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarNoCssCustomProps = 'os-no-css-vars';\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import {\r\n  each,\r\n  hasOwnProperty,\r\n  keys,\r\n  push,\r\n  isEmptyObject,\r\n  type,\r\n  isUndefined,\r\n  isPlainObject,\r\n  isString,\r\n  createOrKeepArray,\r\n} from '~/support';\r\nimport type { PlainObject, DeepPartial } from '~/typings';\r\nimport type { OptionsObject } from '~/options';\r\n\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObject\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  validated: DeepPartial<T>,\r\n  foreign: Record<string, unknown>\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObject;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObject>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: DeepPartial<T> = {};\r\n  const optionsCopy: DeepPartial<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue) as keyof typeof optionsTemplateTypes;\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> =\r\n        createOrKeepArray(templateValue);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  offsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = offsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = offsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import {\r\n  keys,\r\n  attr,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  attrClass,\r\n  wnd,\r\n  mathAbs,\r\n  mathRound,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  strHeight,\r\n  getStyles,\r\n  setStyles,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport type { WH, UpdateCache, XY } from '~/support';\r\nimport type { StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type {\r\n  ViewportOverflowState,\r\n  GetViewportOverflowState,\r\n  HideNativeScrollbars,\r\n} from '~/setups/structureSetup/updateSegments/overflowUpdateSegment';\r\nimport type { InternalEnvironment } from '~/environment';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport type ArrangeViewport = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  viewportScrollSize: WH<number>,\r\n  sizeFraction: WH<number>,\r\n  directionIsRTL: boolean\r\n) => boolean;\r\n\r\nexport type UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nexport type UndoArrangeViewport = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  directionIsRTL: boolean,\r\n  viewportOverflowState?: ViewportOverflowState\r\n) => UndoViewportArrangeResult;\r\n\r\nlet contentArrangeCounter = 0;\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _createUniqueViewportArrangeElement: (env: InternalEnvironment): false | HTMLStyleElement => {\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _cssCustomProperties } = env;\r\n        const create =\r\n          !_cssCustomProperties &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const result = create ? document.createElement('style') : false;\r\n\r\n        if (result) {\r\n          attr(\r\n            result,\r\n            'id',\r\n            `${dataAttributeViewport}-${dataValueViewportArrange}-${contentArrangeCounter}`\r\n          );\r\n          contentArrangeCounter++;\r\n        }\r\n\r\n        return result;\r\n      },\r\n      _overflowUpdateSegment: (\r\n        doViewportArrange: boolean,\r\n        flexboxGlue: boolean,\r\n        viewport: HTMLElement,\r\n        viewportArrange: HTMLStyleElement | false | null | undefined,\r\n        state: StructureSetupState,\r\n        getViewportOverflowState: GetViewportOverflowState,\r\n        hideNativeScrollbars: HideNativeScrollbars\r\n      ): [ArrangeViewport, UndoArrangeViewport] => {\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const arrangeViewport: ArrangeViewport = (\r\n          viewportOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          directionIsRTL\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            // adjust content arrange / before element\r\n            if (viewportArrange) {\r\n              const { sheet } = viewportArrange;\r\n              if (sheet) {\r\n                const { cssRules } = sheet;\r\n                if (cssRules) {\r\n                  if (!cssRules.length) {\r\n                    sheet.insertRule(\r\n                      `#${attr(\r\n                        viewportArrange,\r\n                        'id'\r\n                      )} + [${dataAttributeViewport}~='${dataValueViewportArrange}']::before {}`,\r\n                      0\r\n                    );\r\n                  }\r\n\r\n                  // @ts-ignore\r\n                  const ruleStyle = cssRules[0].style;\r\n\r\n                  ruleStyle[strWidth] = arrangeSize.w;\r\n                  ruleStyle[strHeight] = arrangeSize.h;\r\n                }\r\n              }\r\n            } else {\r\n              setStyles(viewport, {\r\n                '--os-vaw': arrangeSize.w,\r\n                '--os-vah': arrangeSize.h,\r\n              });\r\n            }\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const undoViewportArrange: UndoArrangeViewport = (\r\n          showNativeOverlaidScrollbars,\r\n          directionIsRTL,\r\n          viewportOverflowState?\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState =\r\n              viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n\r\n            // add class\r\n            attrClass(viewport, dataAttributeViewport, dataValueViewportArrange);\r\n\r\n            if (!flexboxGlue) {\r\n              finalPaddingStyle[strHeight] = '';\r\n            }\r\n\r\n            setStyles(viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                hideNativeScrollbars(\r\n                  finalViewportOverflowState,\r\n                  directionIsRTL,\r\n                  doViewportArrange,\r\n                  prevStyle\r\n                );\r\n                setStyles(viewport, prevStyle);\r\n                // remove class\r\n                attrClass(viewport, dataAttributeViewport, dataValueViewportArrange, true);\r\n              },\r\n              finalViewportOverflowState,\r\n            ];\r\n          }\r\n          return [noop];\r\n        };\r\n\r\n        return [arrangeViewport, undoViewportArrange];\r\n      },\r\n      _envWindowZoom: () => {\r\n        let size = { w: 0, h: 0 };\r\n        let dpr = 0;\r\n        const getWindowDPR = (): number => {\r\n          const screen = wnd.screen;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const dDPI = screen.deviceXDPI || 0;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const sDPI = screen.logicalXDPI || 1;\r\n          return wnd.devicePixelRatio || dDPI / sDPI;\r\n        };\r\n        const diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n          const absValOne = mathAbs(valOne);\r\n          const absValTwo = mathAbs(valTwo);\r\n          return !(\r\n            absValOne === absValTwo ||\r\n            absValOne + 1 === absValTwo ||\r\n            absValOne - 1 === absValTwo\r\n          );\r\n        };\r\n\r\n        return (\r\n          envInstance: InternalEnvironment,\r\n          updateNativeScrollbarSizeCache: UpdateCache<XY<number>>\r\n        ): boolean | undefined => {\r\n          const sizeNew = windowSize();\r\n          const deltaSize = {\r\n            w: sizeNew.w - size.w,\r\n            h: sizeNew.h - size.h,\r\n          };\r\n\r\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n            return;\r\n          }\r\n\r\n          const deltaAbsSize = {\r\n            w: mathAbs(deltaSize.w),\r\n            h: mathAbs(deltaSize.h),\r\n          };\r\n          const deltaAbsRatio = {\r\n            w: mathAbs(mathRound(sizeNew.w / (size.w / 100.0))),\r\n            h: mathAbs(mathRound(sizeNew.h / (size.h / 100.0))),\r\n          };\r\n          const dprNew = getWindowDPR();\r\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n          const dprChanged = dprNew !== dpr && dprNew > 0;\r\n          const isZoom = deltaIsBigger && difference && dprChanged;\r\n          let scrollbarSizeChanged;\r\n          let scrollbarSize;\r\n\r\n          if (isZoom) {\r\n            [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n          }\r\n\r\n          size = sizeNew;\r\n          dpr = dprNew;\r\n\r\n          return scrollbarSizeChanged;\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  removeAttr,\r\n  removeElements,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  getStyles,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameScrollbarHidden,\r\n} from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** The rtl scroll behavior of the browser. */\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  /** Whether the browser supports all needed Flexbox features for OverlayScrollbars to work in a more performant way. */\r\n  flexboxGlue: boolean;\r\n  /** Whether the browser supports custom css properties. (also known as css variables) */\r\n  cssCustomProperties: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement,\r\n  clear?: boolean\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  clear && removeElements(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameScrollbarHidden);\r\n  try {\r\n    result =\r\n      getStyles(testElm, cssProperty('scrollbar-width') as StyleObjectKey) === 'none' ||\r\n      getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n  } catch {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  setStyles(parentElm, { [strOverflowX]: strHidden, [strOverflowY]: strHidden, direction: 'rtl' });\r\n  scrollElementTo(parentElm, { x: 0 });\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollElementTo(parentElm, { x: -999 }); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  // IE11 doesn't support \"flexbox glue\"\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) =>\r\n        nativeScrollbarsHiding && target === target.ownerDocument.body && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: getStyles(envElm, 'zIndex') === '-1', // IE11 doesn't support css custom props\r\n    _scrollTimeline: !!scrollT,\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  wnd.addEventListener('resize', () => {\r\n    let scrollbarSizeChanged;\r\n    if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n      const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n        scrollbarsHidingPluginName\r\n      );\r\n      const zoomFn = scrollbarsHidingPlugin ? scrollbarsHidingPlugin._envWindowZoom() : noop;\r\n      scrollbarSizeChanged = !!zoomFn(env, updateNativeScrollbarSizeCache);\r\n    }\r\n\r\n    triggerEvent('r', [scrollbarSizeChanged]);\r\n  });\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype StaticInitialization = HTMLElement | false | null;\r\ntype DynamicInitialization = HTMLElement | boolean | null;\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames.trim(), (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue = isAttrChange\r\n          ? attr(mutationTarget as HTMLElement, attributeName || '')\r\n          : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  removeClass,\r\n  stopPropagation,\r\n  appendChildren,\r\n  getDirectionIsRTL,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  isArray,\r\n  getRTLCompatibleScrollPosition,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether direction changes should be observed. */\r\n  _direction?: boolean;\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const scrollAmount = 3333333;\r\n  const { _direction: observeDirectionChange, _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const getIsDirectionRTL = bind(getDirectionIsRTL, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (\r\n      sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry | boolean\r\n    ) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n      const hasDirectionCache = !isResizeObserverCall && isArray(sizeChangedContext);\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n      let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        const appeared = domRectAppeared(currRContentRect, prevContentRect);\r\n        const firstCall = !prevContentRect;\r\n        appear = firstCall || appeared;\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n\r\n        doDirectionScroll = !skip; // direction scroll when not skipping\r\n      }\r\n      // else if its triggered with DirectionCache\r\n      else if (hasDirectionCache) {\r\n        [, doDirectionScroll] = sizeChangedContext; // direction scroll when DirectionCache changed, false otherwise\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (observeDirectionChange && doDirectionScroll) {\r\n        const rtl = hasDirectionCache ? sizeChangedContext[0] : getDirectionIsRTL(sizeObserver);\r\n        scrollElementTo(sizeObserver, {\r\n          x: getRTLCompatibleScrollPosition(scrollAmount, scrollAmount, rtl && rtlScrollBehavior),\r\n          y: scrollAmount,\r\n        });\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _directionIsRTLCache: hasDirectionCache ? sizeChangedContext : undefined,\r\n          _sizeChanged: !hasDirectionCache,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    if (observeDirectionChange) {\r\n      const [updateDirectionIsRTLCache] = createCache(\r\n        {\r\n          _initialValue: undefined,\r\n        },\r\n        getIsDirectionRTL\r\n      );\r\n\r\n      push(\r\n        destroyFns,\r\n        addEventListener(sizeObserver, 'scroll', (event) => {\r\n          const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n          const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n            directionIsRTLCacheValues;\r\n          if (directionIsRTLCacheChanged) {\r\n            removeClass(listenerElement, 'ltr rtl');\r\n            addClass(listenerElement, directionIsRTLCache ? 'rtl' : 'ltr');\r\n\r\n            onSizeChangedCallbackProxy([\r\n              !!directionIsRTLCache,\r\n              directionIsRTLCacheChanged,\r\n              directionIsRTLCachePrevious,\r\n            ]);\r\n          }\r\n\r\n          stopPropagation(event);\r\n        })\r\n      );\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  attr,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  getDirectionIsRTL,\r\n  each,\r\n  equalWH,\r\n  fractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttr,\r\n  scrollSize,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueHostOverflowVisible,\r\n  dataValueHostUpdating,\r\n  dataValueViewportArrange,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'];\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(structureSetupElements._host),\r\n  };\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _flexboxGlue, _addResizeListener } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const hasOver = _viewportHasClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible\r\n      );\r\n      const hasVpStyle = _viewportHasClass(dataValueViewportArrange, '');\r\n      const scrollOffset = hasVpStyle && getElmentScroll(_viewport);\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, dataValueHostOverflowVisible);\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '');\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible,\r\n        hasOver\r\n      );\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '', hasVpStyle);\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n      scrollElementTo(_viewport, scrollOffset);\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear && !_directionIsRTLCache;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache || [];\r\n\r\n    _directionIsRTLCache && assignDeep(state, { _directionIsRTL: directionIsRTL });\r\n\r\n    updateFn({\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n      _directionChanged: directionIsRTLChanged,\r\n    });\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints = { _hostMutation: targetStyleChanged };\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] =\r\n    _content || !_flexboxGlue ? createTrinsicObserver(_host, onTrinsicChanged) : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getRTLCompatibleScrollBounds,\r\n  mathMax,\r\n  mathMin,\r\n  mathRound,\r\n  strHeight,\r\n  strWidth,\r\n} from '~/support';\r\nimport type { Environment } from '~/environment';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarStructure } from './scrollbarsSetup.elements';\r\n\r\nconst capNumber = (min: number, max: number, number: number) => mathMax(min, mathMin(max, number));\r\n\r\nexport const getScrollbarHandleOffsetPercent = (\r\n  scrollPos: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) => {\r\n  const rawScrollPosMax = mathRound(overflowAmount);\r\n  const [scrollPositionMin, scrollPositionMax] = getRTLCompatibleScrollBounds(\r\n    rawScrollPosMax,\r\n    rtlScrollBehavior\r\n  );\r\n\r\n  const scrollPercentNegate = (scrollPositionMax - scrollPos) / scrollPositionMax;\r\n  const scrollPercentInvert = scrollPos / scrollPositionMin;\r\n  const scrollPercentNone = scrollPos / scrollPositionMax;\r\n  const rawScrollPercent = rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? scrollPercentNegate\r\n      : rtlScrollBehavior.i\r\n      ? scrollPercentInvert\r\n      : scrollPercentNone\r\n    : scrollPercentNone;\r\n\r\n  return capNumber(0, 1, rawScrollPercent);\r\n};\r\n\r\n/**\r\n * Gets the scrollbar handle length ratio\r\n * @param structureSetupState The structure setup state.\r\n * @param isHorizontal Whether the axis is horizontal\r\n * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n * @returns The scrollbar handle length ratio.\r\n */\r\nexport const getScrollbarHandleLengthRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  isHorizontal?: boolean,\r\n  scrollbarStructure?: ScrollbarStructure\r\n) => {\r\n  if (scrollbarStructure) {\r\n    const axis = isHorizontal ? strWidth : strHeight;\r\n    const { _track, _handle } = scrollbarStructure;\r\n\r\n    const handleSize = getBoundingClientRect(_handle)[axis];\r\n    const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n    return capNumber(0, 1, handleSize / trackSize);\r\n  }\r\n\r\n  const axis = isHorizontal ? 'x' : 'y';\r\n  const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n  const viewportSize = _overflowEdge[axis];\r\n  const overflowAmount = _overflowAmount[axis];\r\n\r\n  return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount));\r\n};\r\n\r\nexport const getScrollbarHandleOffsetRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollPercent: number,\r\n  isHorizontal?: boolean\r\n) => {\r\n  const lengthRatio = getScrollbarHandleLengthRatio(\r\n    structureSetupState,\r\n    isHorizontal,\r\n    scrollbarStructure\r\n  );\r\n\r\n  return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  getDirectionIsRTL,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  setT,\r\n  bind,\r\n  getElmentScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarTransitionless,\r\n  classNameScrollbarNoCssCustomProps,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\nimport {\r\n  getScrollbarHandleLengthRatio,\r\n  getScrollbarHandleOffsetPercent,\r\n  getScrollbarHandleOffsetRatio,\r\n} from './scrollbarsSetup.calculations';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _cssCustomProperties } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: 'x' | 'y') =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimelineX = initScrollTimeline('x');\r\n  const scrollTimelineY = initScrollTimeline('y');\r\n\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n  const getScrollbarOffsetKeyframes = (\r\n    overflowAmount: number,\r\n    isHorizontal?: boolean,\r\n    directionRTL?: boolean\r\n  ) => {\r\n    const cushion = 0.5 * (directionRTL ? 1 : -1);\r\n    const directionRTLMultiplicator = isHorizontal && directionRTL ? -1 : 1;\r\n    return {\r\n      transform: [\r\n        getTrasformTranslateValue(numberToCssPx(0 + cushion), isHorizontal),\r\n        getTrasformTranslateValue(\r\n          numberToCssPx(overflowAmount * directionRTLMultiplicator + cushion),\r\n          isHorizontal\r\n        ),\r\n      ],\r\n    };\r\n  };\r\n  const addDirectionRTLKeyframes = (\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    directionRTL?: boolean\r\n  ) =>\r\n    assignDeep(\r\n      keyframes,\r\n      directionRTL\r\n        ? {\r\n            clear: ['left'], // dummy keyframe for direction rtl animation because of chrome bug\r\n          }\r\n        : {}\r\n    );\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(structureSetupState, isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    if (scrollTimelineX && scrollTimelineY) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _scrollbar, _handle } = structure;\r\n        const getRatio = bind(getScrollbarHandleOffsetRatio, structureSetupState, structure);\r\n        const directionRTL = isHorizontal && getDirectionIsRTL(_scrollbar);\r\n        const start = getRatio(directionRTL ? 1 : 0, isHorizontal);\r\n        const end = getRatio(directionRTL ? 0 : 1, isHorizontal);\r\n        setElementAnimation(\r\n          _handle,\r\n          isHorizontal ? scrollTimelineX : scrollTimelineY,\r\n          addDirectionRTLKeyframes(\r\n            {\r\n              transform: [\r\n                getTrasformTranslateValue(ratioToCssPercent(start), isHorizontal),\r\n                getTrasformTranslateValue(ratioToCssPercent(end), isHorizontal),\r\n              ],\r\n            },\r\n            directionRTL\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => {\r\n        const { _handle, _scrollbar } = structure;\r\n        const { _rtlScrollBehavior } = getEnvironment();\r\n        const axis = isHorizontal ? 'x' : 'y';\r\n        const { _overflowAmount } = structureSetupState;\r\n        const isRTL = getDirectionIsRTL(_scrollbar);\r\n\r\n        const offsetRatio = getScrollbarHandleOffsetRatio(\r\n          structureSetupState,\r\n          structure,\r\n          getScrollbarHandleOffsetPercent(\r\n            getElmentScroll(_scrollOffsetElement)[axis],\r\n            _overflowAmount[axis],\r\n            isHorizontal && isRTL && _rtlScrollBehavior\r\n          ),\r\n          isHorizontal\r\n        );\r\n\r\n        return [\r\n          _handle,\r\n          {\r\n            transform: getTrasformTranslateValue(ratioToCssPercent(offsetRatio), isHorizontal),\r\n          },\r\n        ];\r\n      });\r\n    }\r\n  };\r\n  const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n    const { _scrollbar } = structure;\r\n    const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n    const { x, y } = getElmentScroll(_scrollOffsetElement);\r\n    return [\r\n      elm,\r\n      {\r\n        transform: elm\r\n          ? getTrasformTranslateValue({ x: numberToCssPx(x), y: numberToCssPx(y) })\r\n          : '',\r\n      },\r\n    ] as [HTMLElement | false, StyleObject];\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      if (scrollTimelineX && scrollTimelineY) {\r\n        const { _overflowAmount } = structureSetupState;\r\n        const directionRTL = !!horizontalScrollbars.find(({ _scrollbar }) =>\r\n          getDirectionIsRTL(_scrollbar)\r\n        );\r\n        const setScrollbarElementAnimation = (\r\n          scrollbar: HTMLElement,\r\n          timeline: AnimationTimeline,\r\n          overflowAmount: number,\r\n          isHorizontal?: boolean,\r\n          rtl?: boolean\r\n        ) =>\r\n          setElementAnimation(\r\n            scrollbar,\r\n            timeline,\r\n            addDirectionRTLKeyframes(\r\n              getScrollbarOffsetKeyframes(overflowAmount, isHorizontal, rtl),\r\n              directionRTL\r\n            ),\r\n            'add'\r\n          );\r\n\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            setScrollbarElementAnimation(\r\n              _scrollbar,\r\n              scrollTimelineX,\r\n              _overflowAmount.x,\r\n              true,\r\n              directionRTL\r\n            );\r\n            setScrollbarElementAnimation(_scrollbar, scrollTimelineY, _overflowAmount.y);\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNameScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    if (!_cssCustomProperties) {\r\n      addClass(scrollbar, classNameScrollbarNoCssCustomProps);\r\n    }\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNameScrollbarTransitionless);\r\n    }, 300);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimelineX,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimelineY,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  offsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  stopPropagation,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  attrClass,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataValueHostScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState\r\n): ScrollbarsSetupEvents => {\r\n  const { _host, _scrollOffsetElement, _documentElm } = structureSetupElements;\r\n\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [requestHandleTransitionAnimationFrame, cancelHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollByFn = !!_scrollOffsetElement.scrollBy;\r\n\r\n    const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY'; // for pointer event (can't use xy because of IE11)\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n    const leftTopKey = isHorizontal ? 'left' : 'top'; // for BCR (can't use xy because of IE11)\r\n    const whKey = isHorizontal ? 'w' : 'h';\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              offsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElmentScroll(_scrollOffsetElement)[xyKey] || 0,\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n\r\n          const offFns = [\r\n            bind(attrClass, _host, dataAttributeHost, dataValueHostScrollbarPressed),\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          attrClass(_host, dataAttributeHost, dataValueHostScrollbarPressed, true);\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            _scrollOffsetElement.scrollBy({\r\n              left: deltaX,\r\n              top: deltaY,\r\n              behavior: 'smooth',\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          cancelHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // rootClickStopPropagationEvent\r\n      addEventListener(\r\n        _scrollbar,\r\n        'mousedown',\r\n        bind(addEventListener, _documentElm, 'click', stopPropagation, {\r\n          _once: true,\r\n          _capture: true,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      cancelHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import { bind, noop, addEventListener, push, runEachAndClear, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport { type ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideNotNever: boolean | undefined;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = selfClearTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = selfClearTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(options, structureSetupElements, structureSetupState)\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      mouseInHost && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowAmount, _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged || _overflowAmountChanged || _directionChanged || _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  noop,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNameScrollbarHidden,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n  resolveInitialization as generalResolveInitialization,\r\n} from '~/initialization';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportIsContent: boolean;\r\n  _viewportHasClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string\r\n  ) => boolean;\r\n  _viewportAddRemoveClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string,\r\n    add?: boolean\r\n  ) => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const docWnd = ownerDocument.defaultView as Window;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const resolveInitialization = bind(generalResolveInitialization, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // check the default contentElement\r\n  // if truthy (so the element would be present in the DOM) the passed element is the final content element and the viewport element is generated\r\n  // if falsy (so the element wouldn't be present in the DOM) the passed element is the final viewport element and the content element is omitted\r\n  const viewportIsContent =\r\n    !viewportIsTarget &&\r\n    isHTMLElement(possibleViewportElement) &&\r\n    possibleViewportElement === possibleContentElement;\r\n  const defaultContentElementPresent =\r\n    viewportIsContent && !!resolveInitialization(defaultContentInitialization);\r\n  const viewportIstContentViewport = defaultContentElementPresent\r\n    ? generateViewportElement()\r\n    : possibleViewportElement;\r\n  const viewportIsContentContent = defaultContentElementPresent\r\n    ? possibleContentElement\r\n    : generateContentElement();\r\n  const nonBodyViewportElement = viewportIsContent\r\n    ? viewportIstContentViewport\r\n    : possibleViewportElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : nonBodyViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const contentElement = viewportIsContent ? viewportIsContentContent : possibleContentElement;\r\n  const activeElm = ownerDocument.activeElement;\r\n  const setViewportFocus =\r\n    !viewportIsTarget && docWnd.top === docWnd && activeElm === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content: contentElement,\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _windowElm: docWnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportIsContent: viewportIsContent,\r\n    _viewportHasClass: (viewportAttributeClassName: string, hostAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (\r\n      viewportAttributeClassName: string,\r\n      hostAttributeClassName: string,\r\n      add?: boolean\r\n    ) =>\r\n      attrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key) => {\r\n    const value = evaluatedTargetObj[key as keyof StructureSetupElementsObj];\r\n    return push(arr, value && isHTMLElement(value) && !parent(value) ? value : false);\r\n  }, [] as Array<HTMLElement | false>);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? inArray(generatedElements, elm) : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttr(_host, dataAttributeHost);\r\n      removeAttr(_host, dataAttributeInitialize);\r\n      removeAttr(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttr(docElement, dataAttributeHost);\r\n        removeAttr(docElement, dataAttributeInitialize);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    attr(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    attr(_padding, dataAttributePadding, '');\r\n    attr(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      attr(_viewport, dataAttributeViewport, '');\r\n    }\r\n\r\n    const removeHtmlClass =\r\n      isBody && !viewportIsTarget\r\n        ? addClass(parent(targetElement), classNameScrollbarHidden)\r\n        : noop;\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHtmlClass();\r\n      removeAttr(_padding, dataAttributePadding);\r\n      removeAttr(_content, dataAttributeContent);\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n      removeAttr(_viewport, dataAttributeViewport);\r\n\r\n      elementIsGenerated(_content) && unwrap(_content);\r\n      elementIsGenerated(_viewport) && unwrap(_viewport);\r\n      elementIsGenerated(_padding) && unwrap(_padding);\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      attrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden, true);\r\n      push(destroyFns, bind(removeAttr, _viewport, dataAttributeViewport));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, bind(removeElements, _viewportArrange));\r\n    }\r\n    if (setViewportFocus) {\r\n      const tabIndexStr = 'tabindex';\r\n      const ogTabindex = attr(_viewport, tabIndexStr);\r\n\r\n      attr(_viewport, tabIndexStr, '-1');\r\n      _viewport.focus();\r\n\r\n      const revertViewportTabIndex = () =>\r\n        ogTabindex ? attr(_viewport, tabIndexStr, ogTabindex) : removeAttr(_viewport, tabIndexStr);\r\n      const off = addEventListener(ownerDocument, 'pointerdown keydown', () => {\r\n        revertViewportTabIndex();\r\n        off();\r\n      });\r\n\r\n      push(destroyFns, [revertViewportTabIndex, off]);\r\n    } else if (activeElm && (activeElm as HTMLElement).focus) {\r\n      (activeElm as HTMLElement).focus();\r\n    }\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged =\r\n      (_content || !_flexboxGlue) && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding, _flexboxGlue } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || (!_flexboxGlue && _contentMutation);\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  clientSize,\r\n  equalXY,\r\n  attrClass,\r\n  noop,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  windowSize,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strWidth,\r\n  strHeight,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  setStyles,\r\n  getStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostScrollbarHidden,\r\n  dataValueHostOverflowVisible,\r\n  dataValueViewportScrollbarHidden,\r\n  dataValueViewportOverflowVisible,\r\n  dataAttributeViewport,\r\n  dataAttributePadding,\r\n  dataValuePaddingOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { WH, XY } from '~/support';\r\nimport type {\r\n  ArrangeViewport,\r\n  ScrollbarsHidingPlugin,\r\n  UndoArrangeViewport,\r\n} from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle, StyleObjectKey } from '~/typings';\r\nimport type { OverflowBehavior } from '~/options';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\nexport interface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport type GetViewportOverflowState = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  viewportStyleObj?: StyleObject\r\n) => ViewportOverflowState;\r\n\r\nexport type HideNativeScrollbars = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  directionIsRTL: boolean,\r\n  viewportArrange: boolean,\r\n  viewportStyleObj: StyleObject\r\n) => void;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n    _isBody,\r\n    _windowElm,\r\n  },\r\n  state\r\n) => {\r\n  const max0 = bind(mathMax, 0);\r\n  const strVisible = 'visible';\r\n  const overlaidScrollbarsHideOffset = 42;\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const xyCacheOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n  };\r\n  const getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const overflowIsVisible = (overflowBehavior: string) =>\r\n    overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarsHiding,\r\n    _nativeScrollbarsOverlaid,\r\n  } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarsHiding &&\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(fractionalSize, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(scrollSize, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    setStyles(_viewport, {\r\n      [strHeight]: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = state;\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = getStyles(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n      setStyles(_viewport, {\r\n        [strHeight]:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState: GetViewportOverflowState = (\r\n    showNativeOverlaidScrollbars,\r\n    viewportStyleObj?\r\n  ) => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: StyleObjectKey,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = getStyles(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowX, _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowY, _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj[strOverflowX] = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj[strOverflowY] = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars: HideNativeScrollbars = (\r\n    viewportOverflowState,\r\n    directionIsRTL,\r\n    viewportArrange,\r\n    viewportStyleObj\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? strMarginLeft : strMarginRight;\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? strPaddingLeft\r\n      : strPaddingRight;\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle[strMarginBottom] as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj[strWidth] = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj[strPaddingBottom] = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\r\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\r\n        doViewportArrange,\r\n        _flexboxGlue,\r\n        _viewport,\r\n        _viewportArrange,\r\n        state,\r\n        getViewportOverflowState,\r\n        hideNativeScrollbars\r\n      )\r\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n      _scrollbarSizeChanged,\r\n    } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic, _directionIsRTL } = _observersState;\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = _checkOption(\r\n      'showNativeOverlaidScrollbars'\r\n    );\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const adjustViewportArrange =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportScrollbarHidden,\r\n        dataValueHostScrollbarHidden,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (adjustViewportArrange) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(\r\n          dataValueViewportOverflowVisible,\r\n          dataValueHostOverflowVisible,\r\n          false\r\n        );\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const windowInnerSize = windowSize(_windowElm);\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue ||\r\n      adjustViewportArrange;\r\n\r\n    if (adjustViewportStyle) {\r\n      const viewportStyle: StyleObject = {\r\n        [strMarginRight]: 0,\r\n        [strMarginBottom]: 0,\r\n        [strMarginLeft]: 0,\r\n        [strWidth]: '',\r\n        [strOverflowX]: '',\r\n        [strOverflowY]: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle[strOverflowX] as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle[strOverflowY] as string);\r\n      } else {\r\n        setStyles(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    attrClass(_padding, dataAttributePadding, dataValuePaddingOverflowVisible, removeClipping);\r\n    if (!_viewportIsTarget) {\r\n      attrClass(\r\n        _viewport,\r\n        dataAttributeViewport,\r\n        dataValueViewportOverflowVisible,\r\n        overflowVisible\r\n      );\r\n    }\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    assignDeep(state, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataValueHostUpdating } from '~/classnames';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n  };\r\n  const { _target, _viewport, _viewportAddRemoveClass, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _flexboxGlue } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n      const scrollOffset = adjustScrollOffset && getElmentScroll(_viewport);\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElmentScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _target, _viewport, _documentElm, _isBody } = structureSetupElements;\r\n      const scrollingElement = _isBody ? _documentElm.documentElement : _target;\r\n      const initialScroll = getElmentScroll(scrollingElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_viewport, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { Environment } from '~/environment';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n            _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["createCache","options","update","_initialValue","_equal","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isBrowser","window","ElementNodeType","Node","ELEMENT_NODE","_Object$prototype","Object","prototype","toString","hasOwnProperty","typeRgx","isUndefined","obj","undefined","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","key","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","each","source","callback","i","keys","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","from","original","result","Set","forEach","value","elm","createOrKeepArray","isEmptyArray","deduplicateArray","runEachAndClear","args","keep","runFn","fn","prop","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","_","copy","copyIsArray","src","clone","slice","removeUndefinedProperties","deep","isEmptyObject","name","attr","attrName","getAttribute","setAttribute","getValueSet","split","removeAttr","removeAttribute","attrClass","add","currValuesSet","newTokens","join","trim","hasAttrClass","has","getElmPrototype","find","selector","rootElm","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","closestFn","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","noop","removeElements","nodes","e","parentElm","removeChild","before","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","insertedNodes","insertAfter","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","wnd","mathMax","Math","max","mathMin","min","mathRound","round","mathAbs","abs","cAF","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","firstLetterToUpper","str","charAt","toUpperCase","getDummyStyle","style","cssPrefixes","jsPrefixes","jsCache","cssCache","cssProperty","uppercasedName","elmStyle","prefix","prefixWithoutDashes","resultPossibilities","resultPossibility","jsAPI","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","bind","_len","arguments","_key","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","_ref","_timeout","_maxDelay","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","rnothtmlwhite","classListAction","className","action","classList","clazz","classes","match","removeClass","remove","addClass","customCssPropRegex","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","number","notNaN","isFinite","parseToZeroOrNumber","parseFloat","ratioToCssPercent","ratio","toFixed","numberToCssPx","setStyles","styles","rawValue","test","setProperty","_unused","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","reduce","getDirectionIsRTL","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strHidden","zeroObj","w","h","getElmWidthHeightProperty","property","windowSize","customWnd","offsetSize","clientSize","scrollSize","fractionalSize","cssWidth","cssHeight","getBoundingClientRect","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","rectHadDimensions","animationCurrentTime","performance","now","animateNumber","to","duration","onFrame","easing","animationFrameId","timeStart","finalDuration","frame","complete","timeNow","timeElapsed","stopAnimation","percent","progress","animationCompleted","equal","props","propMutation","compareA","compareB","equalWH","equalXY","equalTRBL","equalBCRWH","passiveEventsSupport","passiveStr","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","eventNames","removeEventListener","listener","capture","eventName","doSupportPassiveEvents","passive","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","absoluteCoordinates","pageYOffset","pageXOffset","getRTLCompatibleScrollPosition","normalizedScrollPosition","normalizedScrollPositionMax","rtlScrollBehavior","n","getRTLCompatibleScrollBounds","scrollElementTo","position","scrollLeft","scrollTop","getElmentScroll","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","currListener","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","o","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentFlexboxGlue","classNameEnvironmentFlexboxGlueMax","classNameScrollbarHidden","dataAttributeInitialize","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostScrollbarHidden","dataValueHostScrollbarPressed","dataValueHostUpdating","dataAttributeViewport","dataValueViewportArrange","dataValueViewportScrollbarHidden","dataValueViewportOverflowVisible","dataAttributePadding","dataValuePaddingOverflowVisible","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbarNoCssCustomProps","classNameScrollbarThemeNone","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarTransitionless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","pluginModules","staticPluginModuleInstances","addPlugins","addedPlugin","plugin","registerPluginModuleInstances","staticObj","instanceInfo","_plugin$name","osStatic","static","osInstance","instance","instanceObj","instancePluginMap","getStaticPluginModuleInstance","pluginModuleName","_extends","module","assign","exports","__esModule","optionsTemplateTypes","boolean","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","filter","optionsValue","templateValue","templateIsComplex","propPrefix","_validateRecursive","validated","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","validateOptions","optionsValidationPluginModuleName","_static","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","optionsTemplate","_validateOptions","sizeObserverPluginName","SizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","_setStyles","scrollAmount","scrollEventName","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","destroyFns","contentArrangeCounter","scrollbarsHidingPluginName","ScrollbarsHidingPlugin","_createUniqueViewportArrangeElement","env","_nativeScrollbarsHiding","_nativeScrollbarsOverlaid","_cssCustomProperties","create","_overflowUpdateSegment","doViewportArrange","flexboxGlue","viewport","viewportArrange","state","getViewportOverflowState","hideNativeScrollbars","arrangeViewport","viewportOverflowState","viewportScrollSize","sizeFraction","directionIsRTL","_viewportPaddingStyle","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","arrangeX","arrangeY","hideOffsetX","hideOffsetY","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","sheet","cssRules","insertRule","ruleStyle","undoViewportArrange","finalViewportOverflowState","viewportPaddingStyle","finalPaddingStyle","assignProps","prevStyle","_envWindowZoom","size","dpr","getWindowDPR","screen","dDPI","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","envInstance","updateNativeScrollbarSizeCache","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","scrollbarSizeChanged","scrollbarSize","_updateNativeScrollba","_nativeScrollbarsSize","clickScrollPluginModuleName","ClickScrollPlugin","moveHandleRelative","getHandleOffset","startOffset","handleLength","relativeTrackPointerOffset","iteration","animateClickScroll","clickScrollProgress","sign","animationProgress","handleStartBound","handleEndBound","mouseBetweenHandleBounds","firstIterationPauseTimeout","environmentInstance","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","getRtlScrollBehavior","childElm","direction","parentOffset","childOffset","childOffsetAfterScroll","getFlexboxGlue","revertFbxGlue","minOffsetsizeParent","minOffsetsize","supportsMin","revertFbxGlueMax","maxOffsetsizeParent","maxOffsetsize","supportsMax","createEnvironment","_document","envDOM","envElm","envChildElm","_createEventListenerH","_createCache","getNativeScrollbarSizeCache","_getNativeScrollbarSi","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","ownerDocument","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","_scrollTimeline","_rtlScrollBehavior","_flexboxGlue","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","scrollbarsHidingPlugin","zoomFn","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","isBody","cancelInitializationValue","_getEnvironment","_getDefaultInitializa","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","removeInstance","delete","getInstance","createEventContentChange","eventContentChange","destroyed","destroy","updateElements","getElements","eventElmList","entries","isTargetChild","contains","removeListener","createDOMObserver","isContentObserver","isConnected","_ref2","_attributes","_styleChangingAttributes","_eventContentChange","_nestedTargetSelector","_ignoreTargetChange","_ignoreContentChange","debouncedEventContentChange","_createEventContentCh","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","createSizeObserver","observeDirectionChange","_direction","_appear","sizeObserverPlugin","getIsDirectionRTL","updateResizeObserverContentRectCache","baseElements","sizeObserver","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","hasDirectionCache","skip","doDirectionScroll","_updateResizeObserver","contentRect","currRContentRect","hasDimensions","appeared","firstCall","rtl","_directionIsRTLCache","_sizeChanged","resizeObserverInstance","pop","_sizeObserverPlugin","pluginAppearCallback","pluginDestroyFns","_createCache2","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLCache","directionIsRTLCacheChanged","directionIsRTLCachePrevious","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","structureSetupElements","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","_heightIntrinsic","_directionIsRTL","_host","_viewport","_content","_isTextarea","_viewportIsTarget","_viewportHasClass","_viewportAddRemoveClass","_getEnvironment2","hasOver","hasVpStyle","scrollOffset","contentScroll","viewportScroll","fractional","updateContentSizeCache","contentMutationObserverAttr","onObserversUpdatedDebounced","prev","prevObj","currObj","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","updateHints","_heightIntrinsicChanged","exclusiveSizeChange","updateFn","directionIsRTLChanged","_directionChanged","onContentMutation","contentChangedThroughEvent","_updateContentSizeCac","_contentMutation","onHostMutation","_hostMutation","_ref3","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","_createDOMObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_updateContentSizeCac2","_ref4","_checkOption","_takeRecords","_force","_checkOption2","_checkOption3","attributesChanged","_checkOption4","elementEventsChanged","_checkOption5","debounceValue","debounceChanged","contentMutationObserverChanged","ignoreMutationFromOptions","_createDOMObserver2","ignore","construct","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","capNumber","getScrollbarHandleOffsetPercent","scrollPos","overflowAmount","rawScrollPosMax","_getRTLCompatibleScro","scrollPositionMin","scrollPositionMax","scrollPercentNegate","scrollPercentInvert","scrollPercentNone","rawScrollPercent","getScrollbarHandleLengthRatio","structureSetupState","scrollbarStructure","axis","_track","_handle","handleSize","trackSize","_overflowAmount","_overflowEdge","viewportSize","getScrollbarHandleOffsetRatio","scrollPercent","lengthRatio","createScrollbarsSetupElements","scrollbarsSetupEvents","defaultInitScrollbars","defaultInitScrollbarsSlot","_target","_targetIsElm","_scrollOffsetElement","_isBody","scrollbarsInit","initScrollbarsSlot","elementAnimations","initScrollTimeline","scrollTimelineX","scrollTimelineY","evaluatedScrollbarSlot","generalDynamicInitializationElement","doRefreshScrollbarOffset","scrollbar","getScrollbarOffsetKeyframes","directionRTL","cushion","directionRTLMultiplicator","transform","addDirectionRTLKeyframes","keyframes","cancelElementAnimations","currAnimations","element","doCancel","animation","setElementAnimation","timeline","composite","activeAnimations","activeAnimation","effect","KeyframeEffect","animate","scrollbarStructureAddRemoveClass","scrollbarStructures","_scrollbar","scrollbarStyle","_elmStyle","scrollbarStructureRefreshHandleLength","structure","scrollbarStructureRefreshHandleOffset","getRatio","start","end","isRTL","offsetRatio","styleScrollbarPosition","_getElmentScroll","horizontalScrollbars","verticalScrollbars","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","refreshScrollbarsScrollbarOffset","setScrollbarElementAnimation","_ref5","generateScrollbarDOM","scrollbarClassName","arrToPush","transitionlessClass","track","handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","appendElements","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_refreshScrollbarsScrollbarOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","createScrollbarsSetupEvents","_documentElm","refreshScrollbarStructuresHandleOffset","_selfClearTimeout","wheelTimeout","clearWheelTimeout","_selfClearTimeout2","requestHandleTransitionAnimationFrame","cancelHandleTransitionTimeout","refreshHandleOffsetTransition","scrollByFn","scrollBy","clientXYKey","widthHeightKey","leftTopKey","whKey","xyKey","isAffectingTransition","propertyName","createInteractiveScrollEvents","releasePointerCaptureEvents","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","_scrollElementTo","handleTrackDiff","scrollDeltaPercent","scrollDelta","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","button","isPrimary","pointerType","continuePointerDown","includes","instantClickScroll","shiftKey","getHandleRect","getTrackRect","handleRect","trackRect","axisScale","pointerDownOffset","handleCenter","releasePointerCapture","pointerUpEvent","pointerId","pointerMoveEvent","relativeMovement","setPointerCapture","wheelScrollBy","wheelEvent","deltaX","deltaY","deltaMode","behavior","animateHandleOffset","createScrollbarsSetup","observersSetupState","autoHideIsMove","autoHideIsLeave","autoHideNotNever","mouseInHost","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","requestMouseMoveAnimationFrame","cancelMouseMoveAnimationFrame","requestScrollAnimationFrame","cancelScrollAnimationFrame","_selfClearTimeout3","scrollTimeout","clearScrollTimeout","_selfClearTimeout4","auotHideMoveTimeout","clearAutoHideTimeout","_selfClearTimeout5","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","_selfClearTimeout6","auotHideTimeout","clearAutoTimeout","_createScrollbarsSetu","_scrollEventElement","manageAutoHideSuspension","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","isHoverablePointerType","onHostMouseEnter","_observersUpdateHints","_structureUpdateHints","_overflowEdgeChanged","_overflowAmountChanged","_overflowStyleChanged","_overflowStyle","_hasOverflow","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","themeChanged","visibilityChanged","autoHideChanged","_checkOption6","autoHideSuspendChanged","_checkOption7","_checkOption8","dragScrollChanged","_checkOption9","clickScrollChanged","trulyAppeared","hasOverflow","updateScrollbars","updateVisibility","setScrollbarVisibility","overflowStyle","isVisible","xVisible","yVisible","hasCorner","createStructureSetupElements","createUniqueViewportArrangeElement","defaultInitElements","defaultHostInitialization","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","hostInitialization","paddingInitialization","viewportInitialization","contentInitialization","targetElement","isTextarea","docElement","documentElement","docWnd","defaultView","generalStaticInitializationElement","generalResolveInitialization","createNewDiv","generateViewportElement","generateContentElement","possibleViewportElement","viewportIsTarget","viewportIsTargetBody","possibleContentElement","viewportIsContent","defaultContentElementPresent","viewportIstContentViewport","viewportIsContentContent","nonBodyViewportElement","viewportElement","nonBodyHostElement","hostElement","contentElement","activeElm","activeElement","setViewportFocus","evaluatedTargetObj","_padding","_viewportArrange","_windowElm","_viewportIsContent","viewportAttributeClassName","hostAttributeClassName","generatedElements","elementIsGenerated","isTextareaHostGenerated","targetContents","contentSlot","removeHtmlClass","unwrap","tabIndexStr","ogTabindex","focus","revertViewportTabIndex","off","createTrinsicUpdateSegment","_observersState","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","_currentPaddingCache","paddingChanged","paddingAbsoluteChanged","contentMutation","_updatePaddingCache","paddingStyleChanged","_paddingStyle","_viewportStyle","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_paddingStyleChanged","createOverflowUpdateSegment","max0","strVisible","overlaidScrollbarsHideOffset","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportClientSize","tollerance","amount","overflowIsVisible","overflowBehavior","updateSizeFraction","getCurrentSizeFraction","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","_createCache3","updateOverflowAmountCache","getCurrentOverflowAmountCache","_createCache4","updateOverflowEdge","getCurrentOverflowEdgeCache","_createCache5","updateOverflowStyleCache","fixFlexboxGlue","_setStyles2","_overflowScroll","hostClientSize","isContentBox","subtractXScrollbar","viewportStyleObj","arrangeHideOffset","getStatePerAxis","styleKey","isOverlaid","nativeScrollbarSize","objectPrefferedOverflowStyle","overflowScroll","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","_getStatePerAxis","xOverflowStyle","xOverflowScroll","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","_getStatePerAxis2","yOverflowStyle","yOverflowScroll","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","setViewportOverflowState","overflowOption","setAxisOverflowStyle","hasOverflowAxis","overflowVisible","overflowVisibleBehavior","_setAxisOverflowStyle","overflowX","visibleBehaviorX","_setAxisOverflowStyle2","overflowY","visibleBehaviorY","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","overflowChanged","adjustFlexboxGlue","adjustViewportArrange","overflowXVisible","overflowYVisible","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","preMeasureViewportOverflowState","_undoViewportArrange","redoViewportArrange","undoViewportArrangeOverflowState","_sizeFractionCache","sizeFractionChanged","_viewportScrollSizeCa","viewportScrollSizeChanged","arrangedViewportScrollSize","arrangedViewportClientSize","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","_overflowEdgeCache","overflowEdge","overflowEdgeChanged","_overflowAmuntCache","overflowAmountChanged","_viewportScrollSizeCa2","_sizeFractionCache2","removeClipping","adjustViewportStyle","viewportArranged","_updateOverflowStyleC","overflowStyleChanged","createStructureSetup","_createStructureSetup","appendStructureElements","canceled","updateSegments","updateInfo","adjustScrollOffset","updateSegment","createSetups","onUpdated","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","_createObserversSetup","observersUpdateHints","observersSetupCreate","observersSetupUpdate","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","updateHintsAreTruthy","hints","some","observerUpdateHints","rawChangedOptions","_changedOptions","rawForce","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","scrollingElement","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","_createEventListenerH2","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","_createSetups","sizeChanged","directionChanged","hostMutation","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","pure","base","on","_setupsState","_setupsElements$_stru","_setupsElements$_scro","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","translatedStructure","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugins","isArr","pluginsToAdd","valid","hasElmsFn","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","cssCustomProperties","scrollTimeline","setDefaultInitialization","setDefaultOptions"],"mappings":"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","x_google_ignoreList":[27]}